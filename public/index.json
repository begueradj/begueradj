[{"categories":["development"],"contents":"Sanctum allows, among other things, to authenticate an SPA via cookies using the web authentication guard. The following discussion shows how to create a single page application using Nuxt.js and VuetifyJs to connect it (sign up, sign in and logout a user) to a backend API through Laravel Sanctum. Laravel 8 is the version used below.\n1. Backend Below creates a new Laravel project named \u0026lsquo;server\u0026rsquo;:\n1 composer create-project --prefer-dist laravel/laravel server Once the database settings are done in server/.env file, migrations can be run:\n1 php artisan migrate At this point, Laravel Sanctum can be installed and set as per the official documentation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Install Sanctum composer require laravel/sanctum # Publish its configuration and migration files php artisan vendor:publish --provider=\u0026#34;Laravel\\Sanctum\\SanctumServiceProvider\u0026#34; # Run Sanctum migrations php artisan migrate # Add Sanctum\u0026#39;s middleware to API middleware group in server/app/Http/Kernel.php file \u0026#39;api\u0026#39; =\u0026gt; [ \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class, \u0026#39;throttle:api\u0026#39;, \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class, ], More serious things start at this point: In routes/api.php, auth:sanctum should be used instead of the default auth:api:\n1 2 3 Route::middleware(\u0026#39;auth:sanctum\u0026#39;)-\u0026gt;get(\u0026#39;/user\u0026#39;, function (Request $request) { return $request-\u0026gt;user(); }); The above route api/user is used to request the identity of the currently logged in user, i.d. after the authentication is successful.\nIn .env these 2 values have to be added:\n1 2 3 4 5 # Used in config/session.php SESSION_DOMAIN=localhost # Used in config/sanctum.php. This should match our client SANCTUM_STATEFUL_DOMAINS=localhost:3000 Browsers do not allow HTTP requests between different domains. With CORS, a server can agree about which client it can receive requests. This is done in Laravel in config/cors.php file by setting the following key to true:\n1 \u0026#39;supports_credentials\u0026#39; =\u0026gt; true, It would be nice to create a user in the database at this stage. This can be done from the command line quite fast:\n1 2 3 4 5 6 7 8 9 10 11 12 php artisan tinker Psy Shell v0.10.8 (PHP 7.4.22 — cli) by Justin Hileman \u0026gt;\u0026gt;\u0026gt; $user = new App\\Models\\User; =\u0026gt; App\\Models\\User {#3391} \u0026gt;\u0026gt;\u0026gt; $user-\u0026gt;name = \u0026#39;begueradj\u0026#39;; =\u0026gt; \u0026#34;begueradj\u0026#34; \u0026gt;\u0026gt;\u0026gt; $user-\u0026gt;email = \u0026#39;billal@begueradj.com\u0026#39;; =\u0026gt; \u0026#34;begueradj@gmail.com\u0026#34; \u0026gt;\u0026gt;\u0026gt; $user-\u0026gt;password = bcrypt(\u0026#39;begueradj\u0026#39;); =\u0026gt; \u0026#34;$2y$10$vXdKSDE9Qud/cy4urMrRieeUED2kNSnmZLGfMx3xZls7.69FtFCUe\u0026#34; \u0026gt;\u0026gt;\u0026gt; $user-\u0026gt;save(); =\u0026gt; true Next, 2 controllers can be created to login and to register a user:\n1.1. LoginController 1 php artisan make:controller LoginController The below code is not perfect and does not comply with best practices but the goal is to just make things function:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;?php namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; use Auth; class LoginController extends Controller { public function login(Request $request) { $request-\u0026gt;validate([ \u0026#39;email\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;], \u0026#39;password\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;] ]); if (Auth::attempt($request-\u0026gt;only(\u0026#39;email\u0026#39;, \u0026#39;password\u0026#39;))) { return response()-\u0026gt;json(Auth::user(), 200); } /* throw ValidationException::withMessages([ \u0026#39;email\u0026#39; =\u0026gt; [\u0026#39;The provided credentials are incorrect.\u0026#39;] ]); */ } public function logout() { Auth::logout(); } } 1.2 RegisterController It could be done this way:\n\u0026lt;?php namespace App\\Http\\Controllers; use App\\Models\\User; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Hash; use Auth; class RegisterController extends Controller { public function register(Request $request) { // var_dump($request-\u0026gt;name); $request-\u0026gt;validate([ \u0026#39;name\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;], \u0026#39;email\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;, \u0026#39;email\u0026#39;, \u0026#39;unique:users\u0026#39;], \u0026#39;password\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;, \u0026#39;min:8\u0026#39;, \u0026#39;confirmed\u0026#39;] ]); User::create([ \u0026#39;name\u0026#39; =\u0026gt; $request-\u0026gt;name, \u0026#39;email\u0026#39; =\u0026gt; $request-\u0026gt;email, \u0026#39;password\u0026#39; =\u0026gt; Hash::make($request-\u0026gt;password) ]); } } The new functions can be reached out through routes/api.php:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;?php use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Route; use App\\Http\\Controllers\\LoginController; use App\\Http\\Controllers\\RegisterController; Route::middleware(\u0026#39;auth:sanctum\u0026#39;)-\u0026gt;get(\u0026#39;/user\u0026#39;, function (Request $request) { return $request-\u0026gt;user(); }); Route::post(\u0026#39;/login\u0026#39;, [LoginController::class, \u0026#39;login\u0026#39;]); Route::post(\u0026#39;/register\u0026#39;, [RegisterController::class, \u0026#39;register\u0026#39;]); Route::post(\u0026#39;/logout\u0026#39;, [LoginController::class, \u0026#39;logout\u0026#39;]); 2. Frontend A SPA can be created using Nuxt.js. Below, VuetifyJs as well as axios are going to be used during the creation process of the client project:\n1 yarn create nuxt-app client The @nuxtjs/auth-next module can be installed with:\n1 yarn add --exact @nuxtjs/auth-next Both @nuxtjs/auth-next and @nuxtjs/axios should be declared in nuxt.config.js:\n1 2 3 4 modules: [ \u0026#39;@nuxtjs/axios\u0026#39;, \u0026#39;@nuxtjs/auth-next\u0026#39; ] The settings for both modules are as follows:\n1 2 3 4 5 6 7 8 9 10 axios: { /** When issuing a request to baseURL that needs to pass authentication headers to the backend, \u0026#39;credentials\u0026#39; should be set to \u0026#39;true\u0026#39; */ credentials: true, // default value of withCredentials is fale // This is where to hit the server baseUrl: \u0026#39;http://localhost:8000\u0026#39; }, And:\n1auth: { 2 redirect: { 3 login: \u0026#39;/login\u0026#39;, 4 logout: \u0026#39;/\u0026#39;, 5 callback: \u0026#39;/login\u0026#39;, 6 home: \u0026#39;/\u0026#39; 7 }, 8 strategies: { 9 laravelSanctum: { 10 provider: \u0026#39;laravel/sanctum\u0026#39;, 11 url: \u0026#39;http://localhost:8000\u0026#39;, 12 endpoints: { 13 login: { url: \u0026#39;/api/login\u0026#39;, method: \u0026#39;post\u0026#39; } 14 }, 15 user: { 16 property: false 17 }, 18 tokenRequired: false, 19 tokenType: false 20 } 21 }, 22 localStorage: false 23}, Lines 2 - 7 can be removed as that\u0026rsquo;s already the default behavior of nuxt auth package.\nIf the project is mainly admin focused with only few public pages, the authenticaion module can be set globally:\n1 2 3 router: { middleware: [\u0026#39;auth\u0026#39;] }, And later it can be disabled on indidual public pages (routes, to be exact) as follows:\n1 2 3 export default { auth: false } 2.1. Login component and route Login component can be designed as follows: 1\u0026lt;template\u0026gt; 2 \u0026lt;v-container fill-height\u0026gt; 3 \u0026lt;v-row justify=\u0026#34;center\u0026#34; align=\u0026#34;center\u0026#34;\u0026gt; 4 \u0026lt;v-col cols=\u0026#34;12\u0026#34; sm=\u0026#34;6\u0026#34;\u0026gt; 5 \u0026lt;v-form ref=\u0026#34;form\u0026#34;\u0026gt; 6 \u0026lt;v-text-field 7 v-model=\u0026#34;form.email\u0026#34; 8 :counter=\u0026#34;10\u0026#34; 9 label=\u0026#34;Email\u0026#34; 10 color=\u0026#34;green\u0026#34; 11 required 12 \u0026gt; 13 \u0026lt;v-icon slot=\u0026#34;prepend\u0026#34; color=\u0026#34;grey\u0026#34;\u0026gt; 14 email 15 \u0026lt;/v-icon\u0026gt; 16 \u0026lt;/v-text-field\u0026gt; 17 18 \u0026lt;v-text-field 19 v-model=\u0026#34;form.password\u0026#34; 20 label=\u0026#34;Password\u0026#34; 21 type=\u0026#34;password\u0026#34; 22 color=\u0026#34;green\u0026#34; 23 required 24 \u0026gt; 25 \u0026lt;v-icon slot=\u0026#34;prepend\u0026#34; color=\u0026#34;grey\u0026#34;\u0026gt; 26 lock 27 \u0026lt;/v-icon\u0026gt; 28 \u0026lt;/v-text-field\u0026gt; 29 30 \u0026lt;v-btn color=\u0026#34;blue-grey\u0026#34; class=\u0026#34;ml-0\u0026#34; @click=\u0026#34;login\u0026#34;\u0026gt; 31 Login 32 \u0026lt;/v-btn\u0026gt; 33 \u0026lt;/v-form\u0026gt; 34 \u0026lt;/v-col\u0026gt; 35 \u0026lt;/v-row\u0026gt; 36 \u0026lt;/v-container\u0026gt; 37\u0026lt;/template\u0026gt; 38 39\u0026lt;script\u0026gt; 40export default { 41 name: \u0026#39;Login\u0026#39;, 42 data () { 43 return { 44 form: { 45 email: \u0026#39;\u0026#39;, 46 password: \u0026#39;\u0026#39; 47 } 48 } 49 }, 50 51 methods: { 52 async login () { 53 // this is managed automatically in the background 54 // await this.$axios.$get(\u0026#39;/sanctum/csrf-cookie\u0026#39;) 55 try { 56 let response = await this.$auth.loginWith(\u0026#39;laravelSanctum\u0026#39;, { 57 data: this.form 58 }) 59 // console.log(response) 60 this.$router.push(\u0026#39;/dashboard\u0026#39;) 61 } catch (err) { 62 console.log(err) 63 } 64 } 65 } 66} 67\u0026lt;/script\u0026gt;\nHence this component can be used in the login route:\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;template\u0026gt; \u0026lt;login /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Login from \u0026#39;~/components/authentication/Login.vue\u0026#39; export default { components: { Login } } \u0026lt;/script\u0026gt; The output should look as follows:\n2.2. Register component and route The component should provide a user interface to populate the user migration file of the backend server: 1\u0026lt;template\u0026gt; 2 \u0026lt;v-container fill-height\u0026gt; 3 \u0026lt;v-row justify=\u0026#34;center\u0026#34; align=\u0026#34;center\u0026#34;\u0026gt; 4 \u0026lt;v-col cols=\u0026#34;12\u0026#34; sm=\u0026#34;6\u0026#34;\u0026gt; 5 \u0026lt;v-form ref=\u0026#34;form\u0026#34;\u0026gt; 6 \u0026lt;v-text-field 7 v-model=\u0026#34;form.name\u0026#34; 8 :counter=\u0026#34;10\u0026#34; 9 label=\u0026#34;Name\u0026#34; 10 color=\u0026#34;green\u0026#34; 11 required 12 \u0026gt; 13 \u0026lt;v-icon slot=\u0026#34;prepend\u0026#34; color=\u0026#34;grey\u0026#34;\u0026gt; 14 account_circle 15 \u0026lt;/v-icon\u0026gt; 16 \u0026lt;/v-text-field\u0026gt; 17 18 \u0026lt;v-text-field 19 v-model=\u0026#34;form.email\u0026#34; 20 :counter=\u0026#34;10\u0026#34; 21 label=\u0026#34;Email\u0026#34; 22 color=\u0026#34;green\u0026#34; 23 required 24 \u0026gt; 25 \u0026lt;v-icon slot=\u0026#34;prepend\u0026#34; color=\u0026#34;grey\u0026#34;\u0026gt; 26 email 27 \u0026lt;/v-icon\u0026gt; 28 \u0026lt;/v-text-field\u0026gt; 29 30 \u0026lt;v-text-field 31 v-model=\u0026#34;form.password\u0026#34; 32 label=\u0026#34;Password\u0026#34; 33 type=\u0026#34;password\u0026#34; 34 color=\u0026#34;green\u0026#34; 35 required 36 \u0026gt; 37 \u0026lt;v-icon slot=\u0026#34;prepend\u0026#34; color=\u0026#34;grey\u0026#34;\u0026gt; 38 lock 39 \u0026lt;/v-icon\u0026gt; 40 \u0026lt;/v-text-field\u0026gt; 41 42 \u0026lt;v-text-field 43 v-model=\u0026#34;form.password_confirmation\u0026#34; 44 label=\u0026#34;Confirm password\u0026#34; 45 type=\u0026#34;password\u0026#34; 46 color=\u0026#34;green\u0026#34; 47 required 48 \u0026gt; 49 \u0026lt;v-icon slot=\u0026#34;prepend\u0026#34; color=\u0026#34;grey\u0026#34;\u0026gt; 50 lock 51 \u0026lt;/v-icon\u0026gt; 52 \u0026lt;/v-text-field\u0026gt; 53 54 \u0026lt;v-btn color=\u0026#34;blue-grey\u0026#34; class=\u0026#34;ml-0\u0026#34; @click=\u0026#34;login\u0026#34;\u0026gt; 55 Register 56 \u0026lt;/v-btn\u0026gt; 57 \u0026lt;/v-form\u0026gt; 58 \u0026lt;/v-col\u0026gt; 59 \u0026lt;/v-row\u0026gt; 60 \u0026lt;/v-container\u0026gt; 61\u0026lt;/template\u0026gt; 62 63\u0026lt;script\u0026gt; 64export default { 65 name: \u0026#39;Register\u0026#39;, 66 data () { 67 return { 68 form: { 69 name: \u0026#39;\u0026#39;, 70 email: \u0026#39;\u0026#39;, 71 password: \u0026#39;\u0026#39;, 72 password_confirmation: \u0026#39;\u0026#39; 73 }, 74 errors: {} 75 } 76 }, 77 78 methods: { 79 login () { 80 this.$axios 81 .$post(\u0026#39;/api/register\u0026#39;, this.form) 82 .then(function (response) { 83 console.log(response) 84 }) 85 .catch(function (error) { 86 console.log(error) 87 }) 88 } 89 } 90} 91\u0026lt;/script\u0026gt;\nThe register route can use the above component:\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;register /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Register from \u0026#39;~/components/authentication/Register.vue\u0026#39; export default { auth: false, components: { Register } } \u0026lt;/script\u0026gt; Hitting the register route would result in this user interface:\n2.3. Authenticated user For the authenticate user, a Dashboard component could be created.\n1\u0026lt;template\u0026gt; 2 \u0026lt;v-container fill-height\u0026gt; 3 \u0026lt;v-row justify=\u0026#34;center\u0026#34; align=\u0026#34;center\u0026#34;\u0026gt; 4 \u0026lt;v-col cols=\u0026#34;12\u0026#34; sm=\u0026#34;6\u0026#34;\u0026gt; 5 Hello 6 \u0026lt;span v-if=\u0026#34;user\u0026#34;\u0026gt; {{ user.name }}\u0026lt;/span\u0026gt; 7 \u0026lt;/v-col\u0026gt; 8 \u0026lt;/v-row\u0026gt; 9 \u0026lt;v-row justify=\u0026#34;center\u0026#34; align=\u0026#34;center\u0026#34;\u0026gt; 10 \u0026lt;v-col cols=\u0026#34;12\u0026#34; sm=\u0026#34;6\u0026#34;\u0026gt; 11 \u0026lt;v-btn @click=\u0026#34;logout\u0026#34;\u0026gt; 12 Logout 13 \u0026lt;/v-btn\u0026gt; 14 \u0026lt;/v-col\u0026gt; 15 \u0026lt;/v-row\u0026gt; 16 \u0026lt;/v-container\u0026gt; 17\u0026lt;/template\u0026gt; 18 19\u0026lt;script\u0026gt; 20export default { 21 name: \u0026#39;Welcome\u0026#39;, 22 data () { 23 return { 24 user: \u0026#39;\u0026#39; 25 } 26 }, 27 created () { 28 this.getAuthenticatedUser() 29 }, 30 31 methods: { 32 async getAuthenticatedUser () { 33 console.log(\u0026#39;loggedIn : \u0026#39; + this.$auth.loggedIn) 34 try { 35 let response = await this.$axios.$get(\u0026#39;/api/user\u0026#39;) 36 this.user = response 37 console.log(response.name) 38 } catch (err) { 39 console.log(err) 40 } 41 }, 42 async logout () { 43 console.log(\u0026#39;logout\u0026#39;) 44 await this.$axios.$post(\u0026#39;/api/logout\u0026#39;) 45 this.$router.push(\u0026#39;/\u0026#39;) 46 } 47 } 48} 49\u0026lt;/script\u0026gt; Line 34 requests the /api/user route in server/routes/api.php declared earlier and which is guarded by Sanctum.\nThis component displays the name of the user who is signed in successfully to the application, and offers a logout button to click and exit.\nThe corresponding dashboard route can use the above component as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;template\u0026gt; \u0026lt;v-container fill-height\u0026gt; \u0026lt;v-row justify=\u0026#34;center\u0026#34; align=\u0026#34;center\u0026#34;\u0026gt; \u0026lt;v-col cols=\u0026#34;12\u0026#34; sm=\u0026#34;6\u0026#34;\u0026gt; \u0026lt;welcome /\u0026gt; \u0026lt;/v-col\u0026gt; \u0026lt;/v-row\u0026gt; \u0026lt;/v-container\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Welcome from \u0026#39;~/components/Welcome.vue\u0026#39; export default { name: \u0026#39;Dashboard\u0026#39;, components: { Welcome } } \u0026lt;/script\u0026gt; ","date":"Aug 07","permalink":"https://example.com/post/laravel-sanctum-nuxt-vuetify/","tags":null,"title":"Laravel Sanctum with Nuxt and Vuetify SPA"},{"categories":["development"],"contents":"Often we need to design a custom component which needs to communicate data with its parent. One way to achieve this is to rely on the emit event through the v-model directive. The aim of this article is to show how to test emit event using Vue Test Utils and Jest.\nFor this purpose, let us implement the below user interface which consists of a label Vuetify component reflecting what is being typed within the input field:\nI am going to use Nuxt.js with Vuetify to simplify the task. In pages/index.vue, we have this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;template\u0026gt; \u0026lt;v-container\u0026gt; \u0026lt;v-row no-gutters\u0026gt; \u0026lt;v-col cols=\u0026#34;4\u0026#34; class=\u0026#34;d-flex justify-center align-center\u0026#34;\u0026gt; {{ firstName }} \u0026lt;/v-col\u0026gt; \u0026lt;v-col cols=\u0026#34;8\u0026#34;\u0026gt; \u0026lt;custom-text-field v-model=\u0026#34;firstName\u0026#34; /\u0026gt; \u0026lt;/v-col\u0026gt; \u0026lt;/v-row\u0026gt; \u0026lt;/v-container\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import CustomTextField from \u0026#39;@/components/CustomTextField.vue\u0026#39; export default { components: { CustomTextField }, data () { return { firstName: \u0026#39;begueradj\u0026#39; } } } \u0026lt;/script\u0026gt; The content of components/CustomTextField.vue file we imported from within pages/index.vue is:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 \u0026lt;template\u0026gt; \u0026lt;v-container\u0026gt; \u0026lt;v-row\u0026gt; \u0026lt;v-col cols=\u0026#34;12\u0026#34;\u0026gt; \u0026lt;v-text-field v-model=\u0026#34;firstName\u0026#34; /\u0026gt; \u0026lt;/v-col\u0026gt; \u0026lt;/v-row\u0026gt; \u0026lt;/v-container\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: \u0026#39;CustomTextField\u0026#39;, props: { value: { type: String, default: \u0026#39;\u0026#39; } }, computed: { firstName: { get () { return this.value }, set (value) { this.emitFirstName(value) } } }, methods: { emitFirstName (value) { return this.$emit(\u0026#39;input\u0026#39;, value) } } } \u0026lt;/script\u0026gt; Above, we use a computed property to track value changes which should be emitted right away through emitFirstName() method. That is the less cumbersome and most efficient way that allows us to easy test the emit event:\n1 2 3 4 5 6 7 8 9 10 11 import { mount } from \u0026#39;@vue/test-utils\u0026#39; import CustomTextField from \u0026#39;@/components/CustomTextField.vue\u0026#39; describe(\u0026#39;CustomTextField\u0026#39;, () =\u0026gt; { test(\u0026#39;it emits expected data\u0026#39;, () =\u0026gt; { const wrapper = mount(CustomTextField) expect(wrapper.exists()).toBeTruthy() wrapper.vm.emitFirstName(\u0026#39;hello\u0026#39;) // We emit data expect(wrapper.emitted().input[0]).toEqual([\u0026#39;hello\u0026#39;]) // Data is emitted with expected value }) }) The test will pass:\n1 2 3 4 5 6 7 8 9 10 11 12 13 begueradj@begueradj:~/Development/Nuxt/nv1$ yarn test test/CustomTextField.spec.js yarn run v1.22.4 $ jest test/CustomTextField.spec.js PASS test/CustomTextField.spec.js Logo ✓ is a Vue instance (48ms) Test Suites: 1 passed, 1 total Tests: 1 passed, 1 total Snapshots: 0 total Time: 2.226s Ran all test suites matching /test\\/CustomTextField.spec.js/i. Done in 3.19s. For the test to run, there are dependencies to install and settings to put in place. You will find the related demo on this Github repository.\nNote the presence of test/setup.js file as recommended on Vuetify official documentation:\n1 2 3 4 import Vue from \u0026#39;vue\u0026#39; import Vuetify from \u0026#39;vuetify\u0026#39; Vue.use(Vuetify) ","date":"Jul 13","permalink":"https://example.com/post/vuejs-test-emit/","tags":null,"title":"Testing emit event in Vue.js using Jest and Vue Test Utils"},{"categories":["development"],"contents":" Preamble I decided to write this article following a question published yesterday on the AdonisJs community forum solliciting if there is a tutorial that shows how to use Moment.js in AdonisJs. I answered to that question yesterday, but I would like to share the information with others here.\nDo not try to install Moment.js because Adonis.js uses it internally. This means you can take any Moment.js instance and apply on it any Moment.js method you want.\nServer side We focus only on the server side article, and we will work on the same example the question provides: a Student entity. First we create an AdonisJs application in the form of an API (but what follows will also work if you prefer to use the MVC instance of AdonisJs):\n1 adonis new server --api-only Create a MySQL database (or choose an other RDBMS if you want):\n1 create database test_momentjs Then edit server/.env file with the appropriate MySQL credentials. Now we start to create a students migration file:\n1 adonis make:migration students Open the generated file located in server/database/migrations and write this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026#39;use strict\u0026#39; /** @type {import(\u0026#39;@adonisjs/lucid/src/Schema\u0026#39;)} */ const Schema = use(\u0026#39;Schema\u0026#39;) class StudentsSchema extends Schema { up () { this.create(\u0026#39;students\u0026#39;, (table) =\u0026gt; { table.string(\u0026#39;id\u0026#39;, 30).primary() table.string(\u0026#39;name\u0026#39;, 30).notNullable() table.date(\u0026#39;dob\u0026#39;).notNullable() }) } down () { this.drop(\u0026#39;students\u0026#39;) } } module.exports = StudentsSchema The field in which we are interested here is the dob, acronym for date of birth. Next create the Student model:\n1 adonis make:model Student Go to server/app/Models/Student.js and copy paste this code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026#39;use strict\u0026#39; /** @type {typeof import(\u0026#39;@adonisjs/lucid/src/Lucid/Model\u0026#39;)} */ const Model = use(\u0026#39;Model\u0026#39;) class Student extends Model { static get createdAtColumn() { return null } static get updatedAtColumn() { return null } static get dates() { return super.dates.concat([\u0026#39;dob\u0026#39;]) } static castDates(field, value) { if (field === \u0026#39;dob\u0026#39;) { return value.format(\u0026#39;DD-MM-YYYY\u0026#39;) } } getName(name) { return name.toLowerCase() } } module.exports = Student Everything is played on around this model, so let us break it down:\nFirst, I let AdonisJs know that the corresponding migration file to this model is not implementing the default created_at and updated_at table columns. We let AdonisJs know that dob is a date field by concatinating it to the dates object within the static dates() method: 1 2 3 static get dates() { return super.dates.concat([\u0026#39;dob\u0026#39;]) } I ask AdonisJs to display me this date field in the format I am used to at French universities in the static castDates() method: 1 2 3 4 5 static castDates(field, value) { if (field === \u0026#39;dob\u0026#39;) { return value.format(\u0026#39;DD-MM-YYYY\u0026#39;) } } Do not worry about the effect of castDates(): it has no effect on how the dates are actually stored in the database, all what it does is to format the dates in the shape you want to display it for the client.\nOf course we need a controller to handle our HTTP requests and talk with the model we just created above:\n1 adonis make:controller Student --type http Open server/app/Controllers/Http/StudentController.js and copy paste this code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026#39;use strict\u0026#39; const Student = use(\u0026#39;App/Models/Student\u0026#39;) class StudentController { async store({ request, response }) { const data = request.post() const student = new Student() const keys = Object.keys(data) keys.forEach((key) =\u0026gt; { student[key] = data[key] }) await student.save() response.status(200) } async show({ response, params }) { try { const student = await Student.find(params.id) return student.toJSON() } catch(e) { console.log(e.message) } } } module.exports = StudentController Basically we are interested only in saving instances of the Student entity and fetching one of them given his id for the client so that we can check if our dob is formatted the way we asked AdonisJs to handle it. You can either use curl to communicate with this server or use my demo repository I created yesterday for this purpose.\nOf course, do not forget to show the HTTP requests where to go to be satisfied when they hit the server. For this, you need to open server/start/routes.js file and type this:\n1 2 Route.resource(\u0026#39;students\u0026#39;, \u0026#39;StudentController\u0026#39;) .only([\u0026#39;store\u0026#39;, \u0026#39;show\u0026#39;]) This line .only(['store', 'show']) means the HTTP requests must be directed only to the store() and show() methods located in our controller above. Any other HTTP requests not intended to commincate with these methods will fail into the 404 HTTP code.\nYou can use my GitHub demo and play with the code at your will.\n","date":"Apr 19","permalink":"https://example.com/post/how-to-use-moment.js-with-adonisjs/","tags":null,"title":"How to use Moment.js with AdonisJs"},{"categories":["development"],"contents":" Preamble The majority of upload libraries/frameworks process files multiple times when streaming to an external service such as Amazon S3. Their upload workflows are usually designed like so:\nProcess request files then save them to the tmp directory. Move each file from the tmp directory to the destination directory. Use the external service’s SDK to finally stream the file to the external service. This process wastes server resources reading/writing single files multiple times.\nThat is what you can read on the official AdonisJs documentation. Here we learn how to implement that by streaming the files directly to the MySQL database.\nOur stack AdonisJs: to build the RESTful API server Nuxt.js + Vuetify: to design a user interface to interact with our API. Our app And this is the simple user interface I want to create:\nThe left button will be used to upload a file to the RESTful API server. The right button will be used to download it and display it on the right side\nProject setup In my demo, the client and server code are set apart. My client application is handled by Nuxt.js:\n1 yarn create nuxt-app client and the server by AdonisJs:\nadonis new server --api-only On my Github project, I use Vuetify.js and Eslint.\nNuxt.js client code Here is where the main code is located:\n1 2 3 4 5 6 components/ ├── PhotoUpload.vue pages/ └── index.vue layouts/ └── default.vue In pages/index.vue, we will have this code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;photo-upload /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import PhotoUpload from \u0026#39;@/components/PhotoUpload.vue\u0026#39; export default { name: \u0026#39;MainPage\u0026#39;, components: { PhotoUpload } } \u0026lt;/script\u0026gt; The essential part of the code is what the PhotoUpload.vue component contains. So I show here the full code and then will explain the main points:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 \u0026lt;template\u0026gt; \u0026lt;v-container grid-list-md text-xs-center fill-height \u0026gt; \u0026lt;v-layout row wrap align-center \u0026gt; \u0026lt;v-flex v-if=\u0026#34;url\u0026#34; xs12 sm4 \u0026gt; \u0026lt;span class=\u0026#34;font-weight-bold\u0026#34; \u0026gt; Client \u0026lt;/span\u0026gt; \u0026lt;v-img :src=\u0026#34;url\u0026#34; contain /\u0026gt; \u0026lt;/v-flex\u0026gt; \u0026lt;v-flex xs12 sm4 \u0026gt; \u0026lt;v-text-field v-model=\u0026#34;photoName\u0026#34; name=\u0026#34;photo\u0026#34; outline background-color=\u0026#34;blue\u0026#34; color=\u0026#34;blue\u0026#34; label=\u0026#34;Select image\u0026#34; append-icon=\u0026#34;attach_file\u0026#34; @click=\u0026#34;selectImage\u0026#34; /\u0026gt; \u0026lt;input ref=\u0026#34;image\u0026#34; class=\u0026#34;hide-input\u0026#34; type=\u0026#34;file\u0026#34; accept=\u0026#34;image/*\u0026#34; @change=\u0026#34;imageSelected\u0026#34; \u0026gt; \u0026lt;v-btn round color=\u0026#34;indigo\u0026#34; @click=\u0026#34;uploadPhoto\u0026#34; \u0026gt; \u0026lt;v-icon color=\u0026#34;white\u0026#34; \u0026gt; cloud_upload \u0026lt;/v-icon\u0026gt; \u0026lt;/v-btn\u0026gt; \u0026lt;v-btn v-if=\u0026#34;url\u0026#34; color=\u0026#34;indigo\u0026#34; round @click=\u0026#34;loadPhotoFromServer\u0026#34; \u0026gt; \u0026lt;v-icon color=\u0026#34;white\u0026#34; class=\u0026#34;download\u0026#34; \u0026gt; cloud_upload \u0026lt;/v-icon\u0026gt; \u0026lt;/v-btn\u0026gt; \u0026lt;/v-flex\u0026gt; \u0026lt;v-flex v-if=\u0026#34;url\u0026#34; xs12 sm4 \u0026gt; \u0026lt;span v-if=\u0026#34;photoId\u0026#34; class=\u0026#34;font-weight-bold\u0026#34; \u0026gt; Server \u0026lt;/span\u0026gt; \u0026lt;v-img v-if=\u0026#34;photoId\u0026#34; :src=\u0026#34;`${$axios.defaults.baseURL}/photos/${photoId}`\u0026#34; contain /\u0026gt; \u0026lt;/v-flex\u0026gt; \u0026lt;/v-layout\u0026gt; \u0026lt;/v-container\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: \u0026#39;PhotoUpload\u0026#39;, data: () =\u0026gt; ({ url: \u0026#39;\u0026#39;, photo: \u0026#39;\u0026#39;, photoName: \u0026#39;\u0026#39;, photoId: 0 }), methods: { selectImage() { this.photo = this.$refs.image.click() }, imageSelected(e) { this.$emit(\u0026#39;input\u0026#39;, e.target.files[0]) this.photo = this.$refs.image.files[0] this.photoName = this.photo.name this.url = URL.createObjectURL(this.photo) }, async uploadPhoto() { const data = new FormData() data.append(\u0026#39;file\u0026#39;, this.photo) const config = { headers: { \u0026#39;content-type\u0026#39;: \u0026#39;multipart/form-data\u0026#39; } } await this.$axios.$post(\u0026#39;photos\u0026#39;, data, config) }, loadPhotoFromServer() { this.photoId = 1 } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .hide-input { display: none; } *{ text-transform: none !important; } .download { transform: rotate(180deg) } \u0026lt;/style\u0026gt; Let us break down this mess. Most the above code was explained in the previous article. We added two small aspects to it though. First, we display the image we choose to send to the server. This image preview functionality in Nuxt.js can be useful in many cases you are enough smart to guess. For that, we draw some place holders in the form of Vuetify components to show it up when it is ready:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;v-flex v-if=\u0026#34;url\u0026#34; xs12 sm4 \u0026gt; \u0026lt;span class=\u0026#34;font-weight-bold\u0026#34; \u0026gt; Client \u0026lt;/span\u0026gt; \u0026lt;v-img :src=\u0026#34;url\u0026#34; contain /\u0026gt; \u0026lt;/v-flex\u0026gt; As we can see, the image will be displayed only if url is loaded v-if=\u0026quot;url\u0026quot;. This famous url is just a variable we declared in the data() method, and we set its content to point to the local photo selected by the user using: URL.createObjectURL(this.photo).\nWe also added a Vuetify component to display the photo sent back by the server on a button click:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;v-flex v-if=\u0026#34;photoId\u0026#34; xs12 sm4 \u0026gt; \u0026lt;span class=\u0026#34;font-weight-bold\u0026#34; \u0026gt; Server \u0026lt;/span\u0026gt; \u0026lt;v-img :src=\u0026#34;${$axios.defaults.baseURL}/photos/${photoId}\u0026#34; contain /\u0026gt; \u0026lt;/v-flex\u0026gt; We set photoId to 1 in loadPhotoFromServer() because we are interested to display the file which ID equals to 1 in the MySQL database. We use $axios.defaults.baseURL to refer to the baseURL key we defined in nuxt.config.js file to point to the URL on which our AdonisJs API is being served:\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;v-btn v-if=\u0026#34;url\u0026#34; color=\u0026#34;indigo\u0026#34; round @click=\u0026#34;loadPhotoFromServer\u0026#34; \u0026gt; \u0026lt;v-icon color=\u0026#34;white\u0026#34; class=\u0026#34;download\u0026#34; \u0026gt; cloud_upload \u0026lt;/v-icon\u0026gt; \u0026lt;/v-btn\u0026gt; AdonisJs REST API server code First of all, we need to create the migration, model and controller files for the photos:\n1 2 3 adonis make:migration photos --action create adonis make:model Photo adonis make:controller Photo --type http For our demo, let us be YAGNI and define only what we need in the migration file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026#39;use strict\u0026#39; /** @type {import(\u0026#39;@adonisjs/lucid/src/Schema\u0026#39;)} */ const Schema = use(\u0026#39;Schema\u0026#39;) class PhotosSchema extends Schema { up () { this.create(\u0026#39;photos\u0026#39;, (table) =\u0026gt; { table.increments() table.specificType(\u0026#39;file\u0026#39;, \u0026#34;longblob\u0026#34;).notNullable() table.string(\u0026#39;type\u0026#39;, 10).notNullable() }) } down () { this.drop(\u0026#39;photos\u0026#39;) } } module.exports = PhotosSchema Note that Knex.js which is used by AdonisJs here, does not have a predefined data field for images apart from binary. Luckily this same Knex.js offers us the possibility to define a data type of our choice as long as the RDBMS we use supports it using knex.specifiType() method to define the longblob table column.\nSince are not interested in using the timestamps fields for our photos table, we should inform the corresponding model Photo.js about it:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026#39;use strict\u0026#39; /** @type {typeof import(\u0026#39;@adonisjs/lucid/src/Lucid/Model\u0026#39;)} */ const Model = use(\u0026#39;Model\u0026#39;) class Photo extends Model { static get createdAtColumn() { return null } static get updatedAtColumn() { return null } } module.exports = Photo The important part now comes from the PhotoController.js controller:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \u0026#39;use strict\u0026#39; const Photo = use(\u0026#39;App/Models/Photo\u0026#39;) // const Database = use(\u0026#39;Database\u0026#39;) const getStream = use(\u0026#39;get-stream\u0026#39;) class PhotoController { async store({ request, response }) { let photo = {} request.multipart.file(\u0026#39;file\u0026#39;, {}, async function(file) { const fileContent = await getStream.buffer(file.stream) photo.filecontents = fileContent photo.type = `${file.type}/${file.subtype}` }) try { await request.multipart.process() } catch(e) { console.log(e.message) } const photoInstance = new Photo() photoInstance.file = photo.filecontents photoInstance.type = photo.type try { await photoInstance.save() } catch(e) { console.log(e.message) } response.status(201) } async show({ request, response, params }) { try { // const photo = await Database // .table(\u0026#39;photos\u0026#39;) // .select(\u0026#39;file\u0026#39;) // .where(\u0026#39;id\u0026#39;, params.id) const photo = await Photo.find(params.id) response.header(\u0026#39;content-type\u0026#39;, `${photo.type}/${photo.subtype}`) response.header(\u0026#39;content-length\u0026#39;, Buffer.byteLength(photo.file)) // response.send(photo[0].file) response.send(photo.file) } catch(e) { console.log(e.message) } } } module.exports = PhotoController We used the store() method in the previous article. Here we only add the show() method which receives the photoId we mentioned previously as a paramter in order to use to fetch for the photo in the MySQL database. Of course, as for uploading the photo, we need to define the headers properly to let the client know which type of data it is going to handle.\nWe can use either the Database or the Query Builder providers to look for the photo in the database. Our code comments out the previous option so that we can use each one we prefer.\nIf you upload a photo, you will find it on the server, precisely in the folder /tmp/photos. Note that you have to enable CORS for the requests to be acceped. You can do that by setting cors: true in config/cors.js file. For larger images, set the limit value of maxSize to whatever you want in /config/bodyParser.js which is 20mb by default.\nNote that we forgot to mention one important thing. Actually it is the first thing to set in the API because without it/them we can not communicate with the server: the routes. So in start/routes.js, we can define the routes to our photos resources as follows:\n1 Route.resource(\u0026#39;photos\u0026#39;, \u0026#39;PhotoController\u0026#39;) That is it. I made a GitHub repository for this demo if anyone wants to try it or make a pull request to improve it.\n","date":"Apr 14","permalink":"https://example.com/post/effective-file-streaming-using-adonisjs/","tags":null,"title":"Effective file streaming using AdonisJs"},{"categories":["development"],"contents":" Preamble AdonisJs documentation shows how to upload files to the server using the HTML5 \u0026lt;form\u0026gt; element. But there are cases where axios comes more handy. So let us see how to upload files from a Nuxt.js client application to an AdonisJS RESTful API server with axios. I shared this project on my Github profile.\nProject setup In my demo, the client and server code are set apart. My client application is handled by Nuxt.js:\n1 yarn create nuxt-app client and the server by AdonisJs:\n1 adonis new server --api-only On my Github project, I use Vuetify.js and Eslint.\nNuxt.js client code Here is where the main code is located:\n1 2 3 4 5 6 7 components/ ├── FileUpload.vue └── MainPage.vue pages/ └── index.vue layouts/ └── default.vue And this is the simple user interface I want to create: Basically I like to have MainPage.vue component to wrap all my other components; in this case I need only the FileUpload.vue component:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;file-upload /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import FileUpload from \u0026#39;@/components/FileUpload.vue\u0026#39; export default { name: \u0026#39;MainPage\u0026#39;, components: { FileUpload } } \u0026lt;/script\u0026gt; The essential part of the code is what the FileUpload.vue component contains. So I show here the full code and then will explain the main points: 1\u0026lt;template\u0026gt; 2 \u0026lt;v-container 3 grid-list-md 4 text-xs-center 5 fill-height\u0026gt; 6 \u0026lt;v-layout 7 row 8 wrap 9 align-center\u0026gt; 10 \u0026lt;v-flex 11 xs6 12 offset-xs3\u0026gt; 13 \u0026lt;v-text-field 14 v-model=\u0026#34;photoName\u0026#34; 15 name=\u0026#34;photo\u0026#34; 16 outline 17 background-color=\u0026#34;blue\u0026#34; 18 color=\u0026#34;blue\u0026#34; 19 label=\u0026#34;Select image\u0026#34; 20 append-icon=\u0026#34;attach_file\u0026#34; 21 @click=\u0026#34;selectImage\u0026#34;/\u0026gt; 22 \u0026lt;input 23 ref=\u0026#34;image\u0026#34; 24 class=\u0026#34;hide-input\u0026#34; 25 type=\u0026#34;file\u0026#34; 26 accept=\u0026#34;image/*\u0026#34; 27 @change=\u0026#34;imageSelected\u0026#34;\u0026gt; 28 \u0026lt;v-btn 29 class=\u0026#34;upload-button\u0026#34; 30 color=\u0026#34;indigo\u0026#34; 31 @click=\u0026#34;upload_photo\u0026#34;\u0026gt; 32 Upload 33 \u0026lt;v-icon 34 right 35 color=\u0026#34;white\u0026#34;\u0026gt; 36 cloud_upload 37 \u0026lt;/v-icon\u0026gt; 38 \u0026lt;/v-btn\u0026gt; 39 \u0026lt;/v-flex\u0026gt; 40 \u0026lt;/v-layout\u0026gt; 41 \u0026lt;/v-container\u0026gt; 42\u0026lt;/template\u0026gt; 43 44\u0026lt;script\u0026gt; 45export default { 46 name: \u0026#39;FileUpload\u0026#39;, 47 data: () =\u0026gt;({ 48 photo: \u0026#39;\u0026#39;, 49 photoName: \u0026#39;\u0026#39; 50 }), 51 methods: { 52 selectImage() { 53 this.photo = this.$refs.image.click() 54 }, 55 imageSelected(e) { 56 this.$emit(\u0026#39;input\u0026#39;, e.target.files[0]) 57 this.photo = this.$refs.image.files[0] 58 this.photoName = this.photo.name 59 }, 60 async upload_photo() { 61 let formData = new FormData() 62 formData.append(\u0026#39;file\u0026#39;, this.photo) 63 let url = \u0026#39;http://127.0.0.1:3333/upload\u0026#39; 64 let config = { 65\theaders: { 66 \u0026#39;content-type\u0026#39;: \u0026#39;multipart/form-data\u0026#39; 67\t} 68 } 69 await this.$axios({ 70 method: \u0026#39;post\u0026#39;, 71 url: url, 72 data: formData, 73 config: config 74 }) 75 76 } 77 } 78} 79\u0026lt;/script\u0026gt; 80 81\u0026lt;style scoped\u0026gt; 82.hide-input { 83 display: none; 84} 85*{ 86 text-transform: none !important; 87} 88.upload-button { 89 border-radius: 50px; 90 color: white; 91} 92\u0026lt;/style\u0026gt; As Vuetify.js which I am using here (listed in the dependencies of the project) does not have a component which behaves as the HTML5 \u0026lt;input\u0026gt; element, I need to hide this later one when displaying the \u0026lt;v-text-field /\u0026gt; component. This is the traditional simple but efficient trick usually used in this case; then we trigger a click on this hidden file input as follows:\n1 2 3 imageSelected(e) { this.photo = this.$refs.image.files[0] }, My input file element is referenced with image, that is why we need to look to the references available in this DOM template with it:\n1 2 3 4 5 6 \u0026lt;input ref=\u0026#34;image\u0026#34; class=\u0026#34;hide-input\u0026#34; type=\u0026#34;file\u0026#34; accept=\u0026#34;image/*\u0026#34; @change=\u0026#34;imageSelected\u0026#34;\u0026gt; In my particular case, I am interested in uploading images only, that is why I set accept=\u0026quot;image/*\u0026quot;. The main thing not to forget in the AJAX request is to declare the content-type header. I think the rest of the code is self explanatory:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 async upload_photo() { let formData = new FormData() formData.append(\u0026#39;file\u0026#39;, this.photo) let url = \u0026#39;http://127.0.0.1:3333/upload\u0026#39; // This is the endpoint of my REST API on the server // below is equivalent to the enctype=\u0026#34;multipart/form-data\u0026#34; we use in the \u0026lt;form\u0026gt; element let config = { headers: { \u0026#39;content-type\u0026#39;: \u0026#39;multipart/form-data\u0026#39; } } await this.$axios({ method: \u0026#39;post\u0026#39;, url: url, data: formData, config: config }) } If you are a one-liner, the asynchronous code above (the await part) can be written concisely as follows:\n1 await this.$axios.$post(url, formData, config) AdonisJs REST API server code On the server, I first set the endpoint in start/routes.js:\n1 Route.post(\u0026#39;/upload\u0026#39;, \u0026#39;PhotoController.upload\u0026#39;) Then I created the corresponding controller:\n1 adonis make:controller PhotoController Inside this controller (app/Controllers/Http/PhotoController.js), I received the object File() sent by the axios POST request in my client code by inspecting the request object of AdonisJs: const photo = request.file('file'). Note that I use file to reference its key in the FormData() object which contains it. Below I rename the file with the current time of the server’s machine:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026#39;use strict\u0026#39; const Helpers = use(\u0026#39;Helpers\u0026#39;) class PhotoController { async upload( {request, response} ) { const photo = request.file(\u0026#39;file\u0026#39;) await photo.move(Helpers.tmpPath(\u0026#39;photos\u0026#39;), { name: new Date().getTime() +\u0026#39;.\u0026#39;+avatar.subtype, overwrite: true }) } } module.exports = PhotoController If you upload a photo, you will find it on the server, precisely in the folder /tmp/photos. Note that you have to enable CORS for the requests to be acceped. You can do that by setting cors: true in config/cors.js file. For larger images, set the limit value of maxSize to whatever you want in /config/bodyParser.js which is 20mb by default.\n","date":"Jan 12","permalink":"https://example.com/post/adonisjs-nuxtjs-axios-file-upload/","tags":null,"title":"File upload from a Nuxt.js client to an AdonisJS RESTful API server using axios"},{"categories":["development"],"contents":"How to deploy your Nuxt.js application on Gitlab for continuous integration?\nFirst create a Gitlab CI YAML file and name it .gitlab-ci.yml with the following commands:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 image: node before_script: - npm install cache: paths: - node_modules/ pages: script: - npm run generate artifacts: paths: - public only: - master Then in nuxt.config.js, add these configuration lines:\n1 2 3 4 5 6 7 8 9 /** * Gitlab */ router: { base: \u0026#39;/whatEverName/\u0026#39;, }, generate: { dir: \u0026#39;public\u0026#39;, }, After running the CI job, and on the project’s repository, go to Settings then Pages and click on https://namespace.gitlab.io/whatEverName to navigate your application.\n","date":"Nov 18","permalink":"https://example.com/post/deploy-nuxt-gitlab/","tags":null,"title":"Nuxt.js deployment on Gitlab"},{"categories":["development"],"contents":"I know OpenCV 4.0.0 will rather be released on July 2018, but the installation procedure I describe here will not change. In fact, I already I installed and tested OpenCV 4.0.0-pre on Ubuntu 18.04 (to be continued soon)\nI want to share my own experience regarding this procedure. Whenever I tried this or that tutorial related to installing a recent OpenCV version for Python3.x, I stumble on errors which are not recovered by those tutorials. So all what I advice you to do is to follow the steps mentioned in the official documentation1 take your time to inform yourself about what you are doing and be meticilous about the details2\nUbuntu 18.04 LTS ships with Python3.6 version, which is also the only default Python version available3. Obviously you do not need to install some other Python3.x version unless for a specific reason.\nAs I said, all what you have to do is to reproduce the steps mentioned in the official documentation. But you will encounter few problems which all fall into the same category: the documentation refers to older libariries that are now renamed and upgraded. So whenever you try to install a given library and you get this error message E: Unable to locate package some_package then you have a short list of options to do respond to your issue:\nRun a custom search on Ubuntu Packages Search which will be helpful in most cases4. On Terminal, type sudo apt-get install followed by the libaray’s full or half name (start with the full name first) as written on the documentation, excluding the version numbering and press Tab for autocompletition or suggestions list from which you can easily guess what is the appropriate one. Google about it and do not hesitate to use online communities to ask. Last but not the least: do not even try to run sudo apt-get install python-opencv: this package is incomplete5. Building OpenCV from source Nothing beats installing a library from source, so let us follow the steps mentioned in the official documentation:\nRequired build dependencies 1 2 3 sudo apt-get install cmake sudo apt-get install python3.6-dev sudo apt-get install python3-numpy Note the documentation says python-devel but that is old, you should install python3.6-dev instead. Most packages suffixed by -devel are now re-named by -dev suffix. The truth is that it is always better to install Python related packages using pip which you can install by sudo apt-get install python3-pip and then install what you need as in this example sudo pip3 install numpy (note the difference when using apt above). But for the moment, let us continue with the Canonical instead of PyPI installation.\nDo not run this command:\n1 sudo apt-get install build-essential because those libraries are already available on Ubuntu 18.04.\nLet us move to the next steps, but from now on, I will comment the obsolete software mentioned in the official documentation in front of the relevant command line:\n1 2 3 4 5 sudo apt-get install libgtk2.0-dev # gtk2-devel sudo apt-get install libv4l-dev # of libv4l-devel sudo apt-get install ffmpeg # of ffmpeg-devel sudo apt-get install gstreamer1.0-plugins-base # gstreamer-plugins-base-devel sudo apt-get install pkg-config libavcodec-dev libavformat-dev libswscale-dev Optional Dependencies Although the following consists of additional dependencies, I chose to install them instead of facing further unexpected issues. I have 1000 GB, so this does not cost me anything to install them:\n1 2 3 4 5 6 7 sudo apt-get install libpng++-dev # libpng-devel sudo apt-get install libjpeg-turbo8-dev # libjpeg-turbo-devel sudo apt-get install jasper # jasper-devel sudo apt-get install openexr # openexr-devel sudo apt-get install libtiff5 libtiff5-dev libtiff-tools # libtiff-devel sudo apt-get install libwebp-dev # libwebp-dev sudo apt-get install libtbb2 libtbb-dev libjpeg62-dev libpng16-dev libdc1394-22-dev By now the required and most important optional dependencies are installed. It is time to install OpenCV 4.0.0 for Python 3.6. What I commented refers to the equivalent libraries mentioned on the official documentation on how to install OpenCV for an older Ubuntu system and Python (2) version.\nIf you do not have git install it: sudo apt-get install git. Then clone the OpenCV’s and OpenCV contrib repositories:\n1 2 3 cd ~ git clone https://github.com/opencv/opencv.git git clone https://github.com/opencv/opencv_contrib.git Note that OpenCV and opencv_contrib must be of the same version. By default, pulling down the repositories as shown above does the job, otherwise you can check it yourself too (git checkout). Building OpenCV from Source Using CMake\nBefore setting up the build, give the right path to opencv_contrib`. If it is in your home directory alongside with the OpenCV’s directory then you do not have to change what is below:\n1 2 3 4 5 6 7 8 9 cd ~/opencv mkdir build cd build cmake -D CMAKE_BUILD_TYPE=RELEASE \\ -D CMAKE_INSTALL_PREFIX=/usr/local \\ -D INSTALL_C_EXAMPLES=ON \\ -D INSTALL_PYTHON_EXAMPLES=ON \\ -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \\ -D BUILD_EXAMPLES=ON .. When the process ends, CMake should recognize the Python3.6 interpreter as well as where numpy is as shown on my screenshot. Note that CMake, in my case, knows also about Python2.7 interpreter because I installed it myself (which thing I did not cover here, but you do not need to install it if you want simply to do what the title of this tutorial says) Always inside the opencv/build directory, run this command:\n1 make -j4 I wrote -j4 because my processor has 4 cores. So you must modify this number to your needs. If you do not know the number of cores your processor has then simply run nproc on your Terminal session.\nIf everything is OK by now, you should be able to install OpenCV:\n1 sudo make install Enjoy ! 1.https://docs.opencv.org/3.4.1/d2/de6/tutorial_py_setup_in_ubuntu.html 2.https://docs.opencv.org/3.4.1/d7/d9f/tutorial_linux_install.html 3.https://wiki.ubuntu.com/Python/Python36Transition 4.https://packages.ubuntu.com/ 5.https://www.begueradj.com/installing-opencv-3.2.0-for-python-3.5.2-on-ubuntu-16.04.2-lts.html\n","date":"Jun 01","permalink":"https://example.com/post/install-opencv-python3-ubuntu18/","tags":null,"title":"How to install OpenCV 4.0 for Python3.6.5 on Ubuntu 18.04 LTS"},{"categories":["development"],"contents":"What are the origins and goals of Python decorators? How to implement them and why are they useful?\nIntroduction Even when dealing with scientific and technical subjects, your subjectivity rules over you. I mean, each person has her own style in learning and explaining ideas. This subjective aspect is shaped not only by your intellectual capacities but more importantly by your personality. By personality, I mean how you see and interpret things. This subjectivity dimension highly impacts your learning curve. This is what you may already have observed in yourself. This is also what the Swiss development psychologist Jean Piaget detailed in his theory of cognitive development. So maybe the best book dealing with Python decorators would not fit you. Thus, you understand the reason behind this an other, yet different, contribution on Python decorators that hopefully will fit you.\nThe first thing I would like to start with is that Python decorators have nothing to do with the decorator design pattern described by the Gand of Four in their famous and now classic book Design Patterns: Elements of Reusable Object-Oriented Software.\nBack to 2005 If you are like me when I have to learn new technical notions, you may ask yourself about the origin and goals of Python decorators. As you may already have read elsewhere, Python decorators were first implemented in Python2.4 when introducing @classmethod and @staticmethod built-ins.\nI read an article published on 2005 by the author of Python Web Server Gateway Interface specification (PEP 333) in which he said: as a relatively new feature, their full possibilities have not yet been explored, and perhaps the most exciting uses haven\u0026rsquo;t even been invented yet.\nAs you can see, it is not always evident to see the importance of a new concept, especially if you are not the one who conceived it. Philip Edy had hard time to find the necessity to use decorators. To highlight the 2 reasons as why you need to implement decorators, he invoked a short code snippet without a decorator:\n1 2 3 4 5 6 import atexit def goodbye(): print \u0026#34;Goodbye, world!\u0026#34; atexit.register(goodbye) and then with a decorator version:\n1 2 3 4 5 import atexit @atexit.register def goodbye(): print \u0026#34;Goodbye, world!\u0026#34; While I agree with the first advantage, I do not agree with the last one in that repeating the function name in this situation does not go against the DRY principle you have learned in The Pragmatic Programmer: From Journeyman to Master. The DRY principle is rather violated in this highly rated answer I randomly picked from StackOverflow:\n1 2 3 4 5 6 7 8 9 10 class Date(object): day = 0 month = 0 year = 0 def __init__(self, day=0, month=0, year=0): self.day = day self.month = month self.year = year This class is wrongly designed: You can see that the information hold by both the class and instance variables are of the same nature. The class variables must be removed because each day is unique. Not only this does not conform to DRY principle but it is also a confusing design.\nIf I do not agree with Phillip Eby then what makes decorators a unique and useful Python feature? I will answer this question by the end of this article because you can not grasp the meaning of what I say without actually introducing what decorators are.\nDefinition Unfortunately, I see many resources making a parallel between decorators and Java annotations. I say unfortunately because the only common aspect between these 2 notions is the syntactic sugar line itself which looks exactly alike. Everything else is different:\nJava annotations have no effect on the method or class they decorate, unlike Python decorators which are functions able to modify the behavior (but not the definition) of other functions arbitrarily at runtime. Java annotations provide metadata to class or method while Python decorators take a function as an argument and return a function. I often read comments on other online Python communities complaining about the fact decorators are simple to use but difficult to implement. The other thing I hear is about the simplicity of implementing decorators if you develop in Python under the OOP perspective. So let us take some useful steps that will lead and help to understand what Python decorators are about.\nPython functions Save the following simple Python function in a file called hello.py:\n1 2 3 4 def greet(): print(\u0026#39;Hello\u0026#39;) if __name__ == \u0026#39;__main__\u0026#39;: greet() Running python hello.py will generate a bytecode which Python runtime loads to get interpreted by the virtual machine which then creates a function object to which the name greet is binded.\nFCO I am not here to teach you what is a function. I suppose you already know that. But it is important to remember that in Python, all functions are CFO. But what is this weird term? Well, actually, many programming languages implement the notion of first-class functions (CFC). This means that in such programming languages you can, among other things, use functions as parameters as well as return values which you can store in a variables. This useful concept was introduced by Christopher Strachey. But because everything in Python is an object (yes, including classes!), we rather need to use the acronym FCO instead of FCF. FCO sands for first-class objects. If you do not believe that functions are objects in Python, add this line to the previous hello.py code:\n1 print(greet) This will result in printing:\n1 \u0026lt;function greet at 0x7fd2d1fb32f0\u0026gt; This output simply means that the virtual machine has allocated a memory address 0x7fd2d1fb32f0 for the object called greet.\nA function can be passed as an argument to a function:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def greet(function_name): \u0026#34;\u0026#34;\u0026#34;This functions takes as an argument an other function. Only the function name is passed \u0026#34;\u0026#34;\u0026#34; # Call to function_name and printing out the value it returns print(\u0026#39;Hello {} !\u0026#39;.format(function_name())) def name(fname = \u0026#39;Jack\u0026#39;): \u0026#34;\u0026#34;\u0026#34;This function takes a named and optional argument with a default value. It returns the passed argument. Well, useless example, but this is just for illustration. Once you understand the basics, you can code your own magical stuff. \u0026#34;\u0026#34;\u0026#34; return fname if __name__ ==\u0026#39;__main__\u0026#39;: greet(name) The above example does not only show that we can pass a function as an argument to an other function:\n1 greet(name) but it also shows that you can use a function as a return value to store in a variable:\n1 print(\u0026#39;Hello {} !\u0026#39;.format(function_name())) In case you are stubborn and still do not believe that functions in Python are first class objects then add this line to the previous program:\n1 2 print(greet.__class__) print(issubclass(greet.__class__, object)) The last line above will print True because the function greet, as all other objects in Python, inherits from the object baseclass.\nNested functions Python allows you to define -and call- a function inside an other one. This feature is what is commonly called nested functions. So let us see nested functions in actions by saving the following program in a email.py file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import re def email(email_address): \u0026#34;\u0026#34;\u0026#34;This is an outer function. It receives an arbitrary email address. It delegates the validation check to is_valid() inner function \u0026#34;\u0026#34;\u0026#34; def is_valid(email_address): \u0026#34;\u0026#34;\u0026#34;This is an inner function. It has access to the variable of the enclosing scope to check its validation. \u0026#34;\u0026#34;\u0026#34; ok = re.search(r\u0026#39;(^[a-zA-Z0-9\\.\\+_-]+)@[a-zA-Z].[a-zA-Z\\.]+$\u0026#39;, email_address) return True if ok else False #This will prints True or False print(is_valid(email_address)) # Main program if __name__ == \u0026#39;__main__\u0026#39;: email(\u0026#39;begueradj@begueradj.com\u0026#39;) Note that you can nest your functions as deeply as you want as long as you respect variables scope. Dealing with nested functions, it is important to keep in mind the variables scope. If you need to modify the value of a variable enclosed within the namespace of an outer function and lays inside its inner function, then you must declare it with nonlocal keyword, otherwise the Python interpreter will create a variable local to the inner function:\n1 2 3 4 5 6 7 8 9 10 11 def outer(): x = 1 def inner(): nonlocal x #This means you want to access the x defined in outer() x = 2 inner() print(\u0026#39;x = {}\u0026#39;.format(x)) #The value of x is no longer equal to 1 # Main program if __name__ == \u0026#39;__main__\u0026#39;: outer() If you got a syntax error after running the above program, this means you used Python2.x while the keyword nonlocal is introduced in Python3.x. Do not confuse nonlocal with the global keyword which rather is used to reference variables define in the scope of a module.\nClosures Let us turn back to our previous email.py to tweak it a little bit like follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026gt;\u0026gt;\u0026gt; import re \u0026gt;\u0026gt;\u0026gt; def email(email_address): ... def is_valid(): #Changed only this ... ok = re.search(r\u0026#39;(^[a-zA-Z0-9\\.\\+_-]+)@[a-zA-Z].[a-zA-Z\\.]+$\u0026#39;, email_address) ... return True if ok else False ... return is_valid ... \u0026gt;\u0026gt;\u0026gt; result = email(\u0026#39;begueradj@begueradj.com\u0026#39;) \u0026gt;\u0026gt;\u0026gt; result() True \u0026gt;\u0026gt;\u0026gt; del email \u0026gt;\u0026gt;\u0026gt; result() True \u0026gt;\u0026gt;\u0026gt; Do not you notice something weird? Well, actually there are two unexpected behaviors:\nThe result of first call to result() is not expected because email_address is local to email(). This means any result of an operation made on email_address could no longer exist after email() is executed. But you clearly see this is not the case because is_valid() is called only after the return of email(). After deleting email() we still got information about the result of the operation done on its local variable email_address! Local variables are supposed to disappear after the execution of their enclosing scope! This is weird enough! Actually this is achieved thanks to a feature of Python called closures. A closure consists of a nested function must point to a variable which is local to the enclosing function which must return the nest function. I introduced closures here because they are extensively used for Python decorators.\nMaybe you can understand the Python shell better:\n1 2 3 \u0026gt;\u0026gt;\u0026gt; result.__closure__ (\u0026lt;cell at 0x7f80c224d7f8: str object at 0x7f80c04af228\u0026gt;,) \u0026gt;\u0026gt;\u0026gt; Decorators If you have understood the previous secions, you are already equiped to learn properly about the decorators:\nDefinition I see lot of resources misleading newbies by telling them that the decorator is that weird notation in the form of. Other resources give a more formal definition that may not be that easy for a beginner to understand. Albert Einstein once wrote (or said): If you can\u0026rsquo;t explain it to a six year old, you don\u0026rsquo;t understand it yourself. So let me define what is a decorator in plain English: a decorator is a function which takes an other function as an argument in order to modify its behavior. Yes, as simple as that.\nThere are two formal definitions of decorators that maybe you want to learn about anyway. If this is your case then you have to know the first and almost instinctive formal definition commonly used to describe decorators is: a decorator is a callable returning an other callable. Do not be scared of the callable notion here. In fact, as in any other programming language you already know, you can call a function in Python; hence the adjective callable. More technically speaking, every object which implements the __call__() method is said to be a callable object.\nThe second formal definition you can hear about elsewhere is: decorators are a metaprogramming concept just like metaclasses. Honestly, this is not the best definition to provide for a newbie. But I let you know that metaprogramming simply means that one (or more) function or class of your program tries to modify other pieces (function, class) of your code. For the metaclass notion, I am not going to describe it here, but I may write a simple tutorial about it if you ask me through a comment below.\nExample As with other things in your daily life, the best definition you can provide is done by giving an example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def decorator(decorated): \u0026#34;\u0026#34;\u0026#34;This decorator wraps a nested function to add more functionality to the decorated() function. \u0026#34;\u0026#34;\u0026#34; def inner(): \u0026#34;\u0026#34;\u0026#34;Here is modified the behavior of decorated() This is achieved by adding functionality to it. \u0026#34;\u0026#34;\u0026#34; print(\u0026#39;Hello and welcome to my page.\u0026#39;) decorated() print(\u0026#39;I am of Algerian nationality living in Paris and born in a commune situated in Bejaia called Feraoun\u0026#39;) return inner def decorated(): print(\u0026#39;I am Billal BEGUERADJ.\u0026#39;) # Main program goes here if __name__ == \u0026#39;__main__\u0026#39;: about = decorator(decorated) about() Yes, we have programmed our first decorator. The previous example respects the definition and principles of a decorator: the callable (function) decorator() takes an other callable I named decorated(), it uses a nested function which name is inner() and returns a callable (this later one). Does this remember you of closures? That is why I said previously that closures are extensively used to implement decorators. The function decorated() is supposed to execute only this instruction: print('I am Billal BEGUERADJ.') but thanks to our decorator, we have decorated it to display a detailed self-representation.\n1 2 3 4 5 6 7 8 def decorated(): print(\u0026#39;I am Billal BEGUERADJ.\u0026#39;) # Main program goes here if __name__ == \u0026#39;__main__\u0026#39;: about = decorator(decorated) about() are equivalent to:\n1 2 3 4 5 6 7 8 @decorator def decorated(): print(\u0026#39;I am Billal BEGUERADJ.\u0026#39;) # Main program goes here if __name__ == \u0026#39;__main__\u0026#39;: decorated() I see many online tutorials teach you that @decorator is the decorator. That is very wrong. That line of code is what you may call decoration notation but it is not the decorator itself. I think the first advantage of decorators may be quite obvious: at least you reduced the size of your code (number of instructions) which thing is simply beneficial.\nDecorators of functions with arguments The previous decorator is quite simple because the function it decorates takes no arguments. So how to decorate a function with parameters?Here is an example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import math def find_root(func): \u0026#34;\u0026#34;\u0026#34;This decorator adds functionality to get_root(). \u0026#34;\u0026#34;\u0026#34; def inner(a): \u0026#34;\u0026#34;\u0026#34;The most important thing you have to do here is to pass always the parameters of the callable object to your nested function. \u0026#34;\u0026#34;\u0026#34; print(\u0026#39;The root of {}: \u0026#39;.format(a)) try: return func(a) except ValueError: print(\u0026#39;Opps ! Can not find the root of a negative value !\u0026#39;) pass return inner # Decoration notation goes here @find_root def get_root(a): return math.sqrt(a) # Main program starts here if __name__ == \u0026#39;__main__\u0026#39;: get_root(-4) As you may have noticed, the trick is easy to grasp: always insert the name of the function to be decorated without parameters or even parentheses. Then pass the parameters of the function to decorated to the decorator’s nested function. That is it. Of course, you can incorporate all what I did in inner() into get_root(). For this specific example, you may think it is a matter of opinion. But when you will read below about the utility of decorators, you will change your mind. Note that in case the function to decorate has an arbitrary number of parameters packed within a list or dictionary, you can use * and ** notations to respectively unpack them:\n1 2 3 4 5 6 def decorator(decorated): def nested(*args, **kwargs): print(\u0026#34;+ ----------------------- +\u0026#34;) return decorated(*args, **kwargs) print(\u0026#34;+ ----------------------- +\u0026#34;) return nested Chaining decorators You can chain decorators. This means you can use multiple decorators to decorate the same function as you previously learned. To use such multiple decorated function, you can use this notation:\n1 2 3 4 @decorator1 @decorator2 @decorator3 decorated_function(*args) Decorators and OOP Until now, you have seen, and hopefully, decorators in action. But you are likely to be asked by your employee to develop use object-oriented programming at your workplace. So how to implement decorators when you design the solution to your problem using classes? Let me re-write the very first decorator example you learned previously under the umbrella of OOP:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Decorator(object): def __init__(self, decorated): self.decorated = decorated def __call__(self): print(\u0026#39;Hello and welcome to my page.\u0026#39;) self.decorated() print(\u0026#39;I am of Algerian nationality living in Paris and born in a commune situated in Bejaia called Feraoun\u0026#39;) @Decorator def decorated(): print(\u0026#39;I am Billal BEGUERADJ\u0026#39;) if __name__ == \u0026#39;__main__\u0026#39;: decorated() To make the instances of a class callable, you need to use __call__(). To simplify things for you, think of __call__() as the equivalent of the nested function you learned from above examples. Most newbie developers say decorators are easier to implement using classes.\nWhat are decorators useful for? Even if the example described above are very simply, there is one main area where you can not get ready of decorators: when you develop a framework. Everything else you read in books is primarily-based opinion. When you develop a framework, it is useful to hide the inner implementations of the different functionalities you offer so that the user of your framework can focus in designing the solution to his actual problem. If you read about the architecture of Flask framework, you are already satisfied and surprised to be able to deal with client request so easily:\n1 2 3 4 5 6 from flask import Flask app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def hello_world(): return \u0026#39;Hello, World!\u0026#39; But you can implement decorators for a large range of needs such as when you want to measure the performance of two versions of your code by calculating the time its takes to give me an output:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env python # -*- coding: utf-8 -*- # We need this module for time operations import time def duration(func): \u0026#34;\u0026#34;\u0026#34;You can use this decorator to calculate the time a function takes to finish its execution. \u0026#34;\u0026#34;\u0026#34; def nested(*args, **kwargs): \u0026#34;\u0026#34;\u0026#34;This is the nested function in which the operations are, properly speaking, done. \u0026#34;\u0026#34;\u0026#34; # Save the starting time of the function start = time.time() # Execute the function func(*args, **kwargs) # Caclulate the difference between present time and the previous one. since = time.time() - start # Easy to read output goes here print(\u0026#39;+ --------------------- +\u0026#39;) print(\u0026#39;{}() executed in {} ms\u0026#39;.format(func.__name__, int(since * 1000))) print(\u0026#39;+ --------------------- +\u0026#39;) return nested @duration def greet(a): print(\u0026#39;I just print my argument: {}\u0026#39;.format(a)) # Main program starts here if __name__ == \u0026#39;__main__\u0026#39;: greet(2) Conclusion Decorators are a flexible means to reuse code (compared to functions) and are more useful to interface functionalities for the users of your framework. You can google PythonDecoratorLibrary and you will land on a page providing many examples of decorators that you may reuse in your programs. Your comments are welcome.\n","date":"Feb 18","permalink":"https://example.com/post/python-decorators/","tags":null,"title":"Python decorators"},{"categories":["security"],"contents":"A new revenue stream has been implemented by the end of the last year. Maybe cryptojacking did not get yet the hype it deserves but it has been already widely used. Most Internet consumers are not aware of it though its intentions are far from being innocent. It may also generate inequalities among Internet users.\nDefinition Cryptojacking is about using the user’s device processor, with or without his consent, to mine cryptocurrency when visiting a given webpage which is not necessarily compromised but can do that on purpose. It starts instantly upon visiting a cryptocurrency mining webpage. In its most nefarious form, cryptojacking does not require permission or any other form of effort from the user to be run. In other words, cryptojacking consists in hijacking the user’s devices (computer, smartphone, tablet \u0026hellip;etc) to pilfer digital profit.\nBackground It all started on September 2017, when a company called Coinhive1 devised a mining component for the Monero (coin equivalent in Esperanto) cryptocurrency that a webpage can hide in a form of a JavaScript script that looks as follows:\n1 2 3 4 5 \u0026lt;script src=\u0026#34;https://coinhive.com/lib/coinhive.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var miner = new CoinHive.User(\u0026#39;\u0026lt;site-key\u0026gt;\u0026#39;, \u0026#39;john-doe\u0026#39;); miner.start(); \u0026lt;/script\u0026gt; The motivation behind Coinhive’s product was to offer an alternative income stream for websites to ads which suffer from their own security pitfalls. This company offers a flexible JavaScript API to play with the mining component at will. Hence PirateBay is the first website used this API to raise funds2: As you may have noticed we are testing a Monero javascript miner. This is only a test. We really want to get rid of all the ads. But we also need enough money to keep the site running. Let us know what you think in the comments. Do you want ads or do you want to give away a few of your CPU cycles every time you visit the site? Personally, I see such an approach equivalent to when you ask someone the permission to rape him. That said, I remember I read somewhere else that most PirateBay users accepted an in-browser mining to reduce adds. And since that, copycats have been cropping up to claim funds raising or reducing adds. Nefarious attackers can mine digital money for themselves by compromising a given website to take advantage of its traffic3. There is even a Google Chrome extension4 which is removed from the Web Store for mining cryptocurrency in the background without the knowledge and consent of its users.\nPOW CAPTCHA To prevent spamming activities, website provide a challenge response test in the form of CAPTCHA to be solve by the visitor to check if that is a human or a machine. But nowadays, most probably you have already encountered a website which relies on the proof of work CAPCHA. The concept of POW CAPTCHA5 consists in forcing your CPU to solve a mathematical puzzle in the form of a hashing algorithm for the Monero Blockchain.\nThis is how POW CAPTCHA looks like:\nWhile this technique makes your surfing easier and flatters your laziness in that you do not need to solve the CAPTCHA manually by yourself, you pay the website by letting it exploit your CPU and raise your electrical bills. Of course, depending on the speed and power of your machine, you may wait more or less than other visitors to be able to surf on the website in question.\nDanger This technique is more insidious than the most common malicious JavaScript attacks such as drive-by download ones which often lead to sneak nefarious software into the user’s machine. In practice, cryptojacking is mostly intentional and secretive.\nRunning several cryptojacked webpages may have dramatic consequences emanating from an overwhelmed machine’s processor: that can range from interrupted work to damaging the hardware (as it is the case with the infamous Android trojan called Loapi6) passing by data loss or a glitch in an organization\u0026rsquo;s network. There is a simpler yet effective impact to frequently land on cryptojacking webpages: that will increase your electric bills as the CPU of your machine is “forced” to work more.\nPrevention Ad blockers can protect against cryptojacking. There is an extension called No Coin for the Google Chrome users. The last version of Opera (50)7 ships with a built-in cryptojacking blocker. It is worth to mention that as soon as the user closes the tab of the cryptojacking webpage, the CPU cycles inherent to it and used for mining are freed (but this may not always the case. Although lot of scanners already block Coinhive cryptojacking and categorize it as malware, attackers can always find a way to circumvent them (using obfuscated code, for instance) or by hosting their own mining intermediary for JavaScript components to call back to.\nNote POW CAPTCHA will prevent spamming activities because these later ones are done rather by computer botnet8, so the attacker does not worry about how much CPU power is taken from the machines under his control. On the other hand, cryptojacking compromises the browsing user experience, and maybe one day everybody will have to buy a more expensive computer in order to surf on the Internet, or have to pay more electrical bills to read news online instead of paying for the conventional membership. Definitely, given our nature as humans, cryptojacking may be a source to nourish inequality among Internet consumers.\n1 coinhive.com 2 https://thepiratebay.org/blog 3 https://www.washingtonpost.com/news/the-switch/wp/2017/10/13/hackers-have-turned-politifacts-website-into-a-trap-for-your-pc/ 4 https://gadgets.ndtv.com/apps/news/archive-poster-google-chrome-extension-cryptocurrency-mining-1794930 5 https://www.cs.utexas.edu/~seang/blog/proof-of-work-captcha.html 6 https://www.kaspersky.com/blog/loapi-trojan/20510/ 7 https://techcrunch.com/2018/01/03/opera-now-protects-you-from-cryptojacking-attacks/ 8 https://news.ycombinator.com/item?id=7944540\n","date":"Jan 07","permalink":"https://example.com/post/cryptojacking/","tags":null,"title":"Cryptojacking: cryptography in service of the Devil"},{"categories":["development"],"contents":"Here is a common exception raised when trying to invoke selenium’s webriver component for browser automation launching. Here is how to fix it.\nFor a professional need, I installed selenium testing framework on Ubuntu 17.04 LTS within a virtual environment I created using the recommended method I found on the documentation:\n1 pip install selenium Chrome I then tried to launch my website on Chrome:\n1 2 3 4 5 from selenium import webdriver driver = webdriver.Chrome() driver.get(\u0026#34;https://www.begueradj.com\u0026#34;) I have been slapped by this exception:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Traceback (most recent call last): File \u0026#34;/home/begueradj/sel/lib/python3.5/site-packages/selenium/webdriver/common/service.py\u0026#34;, line 74, in start stdout=self.log_file, stderr=self.log_file) File \u0026#34;/usr/lib/python3.5/subprocess.py\u0026#34;, line 947, in __init__ restore_signals, start_new_session) File \u0026#34;/usr/lib/python3.5/subprocess.py\u0026#34;, line 1551, in _execute_child raise child_exception_type(errno_num, err_msg) FileNotFoundError: [Errno 2] No such file or directory: \u0026#39;chromedriver\u0026#39; During handling of the above exception, another exception occurred: Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; File \u0026#34;/home/begueradj/sel/lib/python3.5/site-packages/selenium/webdriver/chrome/webdriver.py\u0026#34;, line 62, in __init__ self.service.start() File \u0026#34;/home/begueradj/sel/lib/python3.5/site-packages/selenium/webdriver/common/service.py\u0026#34;, line 81, in start os.path.basename(self.path), self.start_error_message) selenium.common.exceptions.WebDriverException: Message: \u0026#39;chromedriver\u0026#39; executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home As I usual, I read the error message, and found the last line interesting:\n1 selenium.common.exceptions.WebDriverException: Message: \u0026#39;chromedriver\u0026#39; executable needs to be in PATH. As a robot, I googled about that weird \u0026ldquo;chromedriver\u0026rdquo; and landed on this:\nWebDriver is an open source tool for automated testing of webapps across many browsers. It provides capabilities for navigating to web pages, user input, JavaScript execution, and more. ChromeDriver is a standalone server which implements WebDriver\u0026rsquo;s wire protocol for Chromium. ChromeDriver is available for Chrome on Android and Chrome on Desktop (Mac, Linux, Windows and ChromeOS).\nSo I obeyed to the error message I got above by downloading the latest version of ChromeDriver, uncompressed the executable file and set a path to it like this:\n1 export PATH=$PATH:/home/begueradj/Downloads/chromedriver Firefox Even if I do not use Mozilla Firefox on Ubuntu 17.04 and Ubuntu 16.10 for speed performance reasons, I was curious and tried to achieve the same goal I did with Chrome previously:\n1 2 3 4 5 from selenium import webdriver driver = webdriver.Firefox() driver.get(\u0026#34;https://www.begueradj.com\u0026#34;) A similar exception has been raised:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Traceback (most recent call last): File \u0026#34;/home/begueradj/sel/lib/python3.5/site-packages/selenium/webdriver/common/service.py\u0026#34;, line 74, in start stdout=self.log_file, stderr=self.log_file) File \u0026#34;/usr/lib/python3.5/subprocess.py\u0026#34;, line 947, in __init__ restore_signals, start_new_session) File \u0026#34;/usr/lib/python3.5/subprocess.py\u0026#34;, line 1551, in _execute_child raise child_exception_type(errno_num, err_msg) FileNotFoundError: [Errno 2] No such file or directory: \u0026#39;geckodriver\u0026#39; During handling of the above exception, another exception occurred: Traceback (most recent call last): File \u0026#34;so.py\u0026#34;, line 4, in \u0026lt;module\u0026gt; driver = webdriver.Firefox() File \u0026#34;/home/begueradj/sel/lib/python3.5/site-packages/selenium/webdriver/firefox/webdriver.py\u0026#34;, line 144, in __init__ self.service.start() File \u0026#34;/home/begueradj/sel/lib/python3.5/site-packages/selenium/webdriver/common/service.py\u0026#34;, line 81, in start os.path.basename(self.path), self.start_error_message) selenium.common.exceptions.WebDriverException: Message: \u0026#39;geckodriver\u0026#39; executable needs to be in PATH. How to fix this issue is highlighted by the last line of the above error message:\n1 selenium.common.exceptions.WebDriverException: Message: \u0026#39;geckodriver\u0026#39; executable needs to be in PATH. As previously, I googled about the weird \u0026lsquo;geckodriver\u0026rsquo; and found that it is a web browser engine used most noticeably the Firefox web browser. So I simply downloaded geckodriver, uncompressed it and defined a path to the executable file:\n1 export PATH=$PATH:/home/begueradj/Downloads/geckodriver I believe you can proceed similarly whatever your favorite web browser is.\n","date":"Oct 15","permalink":"https://example.com/post/selenium/","tags":null,"title":"Installing Selenium drivers on Ubuntu"},{"categories":["development"],"contents":"Today, I have answered a question on Code Review website. The OP’s code sample itself was simple, but a user commented my answer stating that he never heard about function’s parameters should not be used directly.\nFollowing my answer to this question, I wrote this: \u0026ldquo;Whatever the programming language you use, do not use the parameters inside your function\u0026rdquo; and I explained what I meant:\n1 2 3 def my_function(param): par = param # Now work with \u0026#34;par\u0026#34; instead of \u0026#34;param\u0026#34; A user was curious about the last section of my thread and commented: \u0026ldquo;Is your point on \u0026lsquo;do not use function params directly, no matter what language\u0026rsquo; (paraphrased) definitely correct? I\u0026rsquo;m not doubting you, just haven\u0026rsquo;t seen this before with Python\u0026rdquo;.\nOf course, with the low reputation I have on that website, I could not respond to the comments in question without justifying my argumentation with a more trusted and official resource. This has been hard for me to remember where I exactly read this information. Actually this is even harder to justify now that I do not see, AFAIK, where this is written other than in a singe book that made my day.\nThe book in question is called: \u0026ldquo;Code Complete: A Practical Handbook of Software Construction*\u0026rdquo;. On its Chapter 7, section 7.5, Steve McConnell has written: Don’t use routine parameters as working variables It’s dangerous to use the parameters passed to a routine as working variables. Use local variables instead*. The author has provided a Java sample code similar to the one of my answer:\n1 2 3 4 5 6 int Sample( int inputVal ) { inputVal = inputVal * CurrentMultiplier( inputVal ); inputVal = inputVal + CurrentAdder( inputVal ); ... return inputVal; } And I wanted to share the experience and text of the author about it:\nIn this code fragment, inputVal is misleading because by the time execution reaches the last line, inputVal no longer contains the input value; it contains a computed value based in part on the input value, and it is therefore misnamed. If you later need to modify the routine to use the original input value in some other place, you’ll probably use inputVal and assume that it contains the original input value when it actually doesn\u0026rsquo;t.\nAnd the solution provided in Complete Code is exactly what my memory reproduced through my answer:\n1 2 3 4 5 6 7 int Sample( int inputVal ) { int workingVal = inputVal; workingVal = workingVal * CurrentMultiplier( workingVal ); workingVal = workingVal + CurrentAdder( workingVal ); ... return workingVal; } The author wrote a side note in which he stated this gives you the advantage of making use of inputVal if needed within the above function’s body, or elsewhere in the program. The author adds:\nIntroducing the new variable workingVal clarifies the role of inputVal and eliminates the chance of erroneously using inputVal at the wrong time. Assigning the input value to a working variable emphasizes where the value comes from. If you still are not convinced of the author’s experience and advice, let me share with you a practical must use case of this rule, by creating a primitive tkinter based GUI that disaplays a simple button:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import tkinter as tk class Demo(tk.Frame): def __init__(self, master): tk.Frame.__init__(self, master) self.create_widgets() def create_widgets(self): self.button = tk.Button(master, text=\u0026#39;Demo\u0026#39;) self.button.pack() if __name__ == \u0026#39;__main__\u0026#39;: root = tk.Tk() d = Demo(root) root.mainloop() In the initalizer, I ignored by purpose our magic rule regarding the master parameter. The compiler triggers this exception: NameError: name 'master' is not defined .\nLet us re-write the same program and be compliant to our rule:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import tkinter as tk class Demo(tk.Frame): def __init__(self, master): self.master = master tk.Frame.__init__(self, self.master) self.create_widgets() def create_widgets(self): self.button = tk.Button(self.master, text=\u0026#39;Demo\u0026#39;) self.button.pack() if __name__ == \u0026#39;__main__\u0026#39;: root = tk.Tk() d = Demo(root) root.mainloop() Even if this situation is, maybe, not the best to explain the importance of this rule as it involves class variables, the rule is more practical than it seems. And for sure you can find out many other practical situations where this rule must be considered and respected.\n","date":"Sep 04","permalink":"https://example.com/post/function-parameters/","tags":null,"title":"Do not make a direct use of function parameters"},{"categories":["development"],"contents":"Tkinter is the standard Python interface to Tk/Tcl GUI toolkit. Programmers often wonder how to structure their tkinter program. In this article, I am going to answer to a question posted on StackOverflow which contributions drift away from some of software engineering fundamentals.\nI see many questions posted on StackOverflow and CodeReview asking for tkinter best practices and improvements. While many of the contributions to those questions are interesting, they also teach bad and even harmful coding habits that result in scalability and maintenance issues.\nOn the present short article, I am mainly going to address the Best way to structure a tkinter application question asked on StackOverflow and review what is good and what is bad in the provided answers.\nimports First of all, do not use a wildcard import as stated in the accepted answer. This is important when you use Tk themed widgets. To be more clear, when you code:\n1 2 from tkinter import * from ttk import * This will result in substituting all tkinter widgets with ttk ones; but may be you want to use specific ttk widgets only.\nI agree when the accepted answer states that this \u0026ldquo;makes the code completely obvious when you are using Tkinter classes, ttk classes, or some of your own\u0026rdquo;. However I disagree with the bold text statement because you should not even dare to code a class name as Button for example. Ths is what is written in the famous Clean Code book written by Robert Cecil Martin on page 50: \u0026ldquo;not to encode the container type into the name.\u0026rdquo;\nSo the recommanded import is as follows:\n1 2 import tikter as tk # Python 3.x import Tkinter as Tk # Python 2.x The main application is a class While GUI are behind the development of OOP paradigm, there are other non OOP paradigms, such as \u0026ldquo;functional reactive programming\u0026rdquo; , to design GUIs. However, they do not have, AFAIK, serious implementations. And since you will not get disappointed by relying on OOP concepts to design a tkinter GUI, I have to reproduce the nicely worded paragraph in the accepted answer to the above linked question: This gives you a private namespace for all of your callbacks and private functions, and just generally makes it easier to organize your code. In a procedural style you have to code top-down, defining functions before using them, etc. With this method you don\u0026rsquo;t since you don\u0026rsquo;t actually create the main window until the very last step. I prefer inheriting from tk.Frame just because I typically start by creating a frame, but it is by no means necessary.\nThe class initializer The secret of a beautiful tkinter GUI design lays within the main class\u0026rsquo; initializer. Thus I give it the full attention. There are few wrong things with the accepted answer however. Especially with the class\u0026rsquo; initializer:\n1 2 3 4 5 6 class MainApplication(tk.Frame): def __init__(self, parent, *args, **kwargs): tk.Frame.__init__(self, parent, *args, **kwargs) self.parent = parent \u0026lt;create the rest of your GUI here\u0026gt; The first thing I would like to highlight is the number of parameters hold by the initializer: while *args and **kwargs allow a function to handle a variable number of parameters, this initializer\u0026rsquo;s design must absolutely be avoided because parameters constitute a different level of abstraction from the function’s or class\u0026rsquo; name. In other words, when you instantiate the \u0026ldquo;MainApplication()\u0026rdquo; class, you push the reader of your code (and yourself) to think on different levels of details: while maybe one could understand what your class is doing just from its well chosen name, he will have to think about lower level details which are the arguments1 you have to pass to it. A suitable tkinter class should not be, at worst, monadic.\nThe parent parameter above is also called sometimes master. I personally prefer to call it master as there is one master widget by a tkinter application, while any widget can be a parent of an other widget. The accepted answer shows you must code:\n1 self.parent = parent but it does not explain why. Actually there are are two reasons for that. The first one is common to all situations you may encounter in any programming context in any other programming language: \u0026ldquo;Don’t use routine parameters as working variables It’s dangerous to use the parameters passed to a routine as working variables. Use local variables instead\u0026rdquo;2. The second reason for this way of doing things is that it will avoid you later in stumbling in many AttributeError exception situations.\nThe second line of code that should come right away after the self.master = master instruction is a self.configure_gui() function3 Which only purpose is to save the general settings and configurations of your applications.\nFor instance, in a typical configuration function you may want to specify the size of the main window of your GUI and disable resizing it and, why not, set a custom title to your application:\n1 2 3 4 def configure_gui(self): self.master.title(\u0026#34;Snake game\u0026#34;) self.master.geometry(\u0026#34;500x500\u0026#34;) self.master.resizable(False, False) The advantage of this approach is that you can decide to change the setting of your application whenever you want, and most importantly, you know where you will have to do it!\nAn other wrong thing taught by the contributions to that question is teaching to instantiate classes and creating application widgets directly from within the initializer itself. The good practice I recommend is to use a function called create_widgets() inside which you can create the widgets of your application in case you have very widgets to deal with or, in case you have to design a rich GUI with different components, areas and surfaces, follow a top-down approach by calling other smaller functions each having its own responsibility:\n1 2 3 def create_widgets(self): self.create_menu(...) self.create_game_board(...) Last but not the least, follow the SaYa idiom and never use more than one layout manager for the same containing parent widget.\nSo here is a basic skeleton for coding a tkinter based GUI:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import tkinter as tk class MainApplication(tk.Frame): def __init__(self, master): self.master = master tk.Frame.__init__(self, self.master) self.configure_gui() self.create_widgets() def congigure_gui(self): # ... def create_widgets(self): # ... if __name__ == \u0026#39;__main__\u0026#39;: root = tk.Tk() main_app = MainApplication(root) root.mainloop() 1 Parameters are the named variables in function signatures, and arguments are the values passed to functions. 2 Steve McConnell, Complete Code, page 176. 3 You can choose a name of your own, but respect the naming conventions specified in PEP8.\n","date":"Jun 27","permalink":"https://example.com/post/tkinter-best-practices/","tags":null,"title":"Tkinter best practices"},{"categories":["development"],"contents":"This is a basic tutorial to introduce minidom. In fact, this is not really a tutorial but just a few list of notes about this library as there is already a short but good tutorial about it online1.\nLet us consider this XML data:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;stock\u0026gt; \u0026lt;product id=\u0026#34;p1\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Product 1\u0026lt;/title\u0026gt; \u0026lt;reference\u0026gt;999-X\u0026lt;/reference\u0026gt; \u0026lt;price\u0026gt;20.10\u0026lt;/price\u0026gt; \u0026lt;dimensions\u0026gt; \u0026lt;weight\u0026gt;4\u0026lt;/weight\u0026gt; \u0026lt;height\u0026gt;50\u0026lt;/height\u0026gt; \u0026lt;width\u0026gt;20\u0026lt;/width\u0026gt; \u0026lt;/dimensions\u0026gt; \u0026lt;/product\u0026gt; \u0026lt;product id=\u0026#34;p2\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Product 2\u0026lt;/title\u0026gt; \u0026lt;reference\u0026gt;999-B\u0026lt;/reference\u0026gt; \u0026lt;price\u0026gt;55.5\u0026lt;/price\u0026gt; \u0026lt;dimensions\u0026gt; \u0026lt;weight\u0026gt;3.99\u0026lt;/weight\u0026gt; \u0026lt;height\u0026gt;50\u0026lt;/height\u0026gt; \u0026lt;width\u0026gt;20\u0026lt;/width\u0026gt; \u0026lt;/dimensions\u0026gt; \u0026lt;/product\u0026gt; \u0026lt;/stock\u0026gt; You can either save this as an XML file or consider it as a string. In both cases, you will need to import the library:\n1 from xml.dom import minidom In the later case, copy/paste the XML data above:\n1 2 3 xml_data = \u0026#34;\u0026#34;\u0026#34; # Copy/paste previous XML data above here. \u0026#34;\u0026#34;\u0026#34; And then parse it using parseString() function which returns an XML Document object:\n1 2 from xml.dom import minidom xml_doc = minidom.parseString(xml_data) If you encounter this error message:\n1 xml.parsers.expat.ExpatError: XML or text declaration not at start of entity: line 2, column 0 Then you have to remove the leading and trailing characters due to the copy/paste text operation:\n1 2 3 4 5 6 7 from xml.dom import minidom xml_data = \u0026#34;\u0026#34;\u0026#34; # Copy/pase above XML data here. \u0026#34;\u0026#34;\u0026#34; xml_data = xml_data.strip() xml_doc = minidom.parseString(xml_data) In case you decide to save the data in an XML file (with .xml extension) then you need to use parse() to parse it:\n1 xml_doc = minidom.parse(xml_file_name) Once the XML Document object xml_doc obtained, the rest of the operations remain the same for both cases.\nGetting the root element 1 2 3 4 \u0026gt;\u0026gt;\u0026gt; xml_doc.documentElement \u0026lt;DOM Element: stock at 0x7ff5469ebb48\u0026gt; \u0026gt;\u0026gt;\u0026gt; xml_doc.documentElement.tagName u\u0026#39;stock\u0026#39; We have only two products as direct children of stock which is the root element in our XML Document xml_doc. So we expect the number of children elements of root = xml_doc.documentElement to be 2, but we get a different result:\n1 2 3 \u0026gt;\u0026gt;\u0026gt; root = xml_doc.documentElement \u0026gt;\u0026gt;\u0026gt; len(root.childNodes) 5 To understand this weird result, you can inspect the output of root.childNodes:\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026gt;\u0026gt;\u0026gt; root.childNodes [\u0026lt;DOM Text node \u0026#34;\u0026#39;\\n \u0026#39;\u0026#34;\u0026gt;, \u0026lt;DOM Element: product at 0x7f4550c59470\u0026gt;, \u0026lt;DOM Text node \u0026#34;\u0026#39;\\n \u0026#39;\u0026#34;\u0026gt;, \u0026lt;DOM Element: product at 0x7f4550c59930\u0026gt;, \u0026lt;DOM Text node \u0026#34;\u0026#39;\\n\u0026#39;\u0026#34;\u0026gt;]``` Now things become clear: we see 3 additional Text children consisting of the new lines `\\n` we did not think about. This is important to keep in mind when especially when you try to get values of certain child nodes: ```python \u0026gt;\u0026gt;\u0026gt; root.childNodes[0].nodeValue \u0026#39;\\n \u0026#39; \u0026gt;\u0026gt;\u0026gt; root.childNodes[1].nodeValue \u0026gt;\u0026gt;\u0026gt; root.childNodes[1] \u0026lt;DOM Element: product at 0x7f4550c59470\u0026gt; \u0026gt;\u0026gt;\u0026gt; root.childNodes[1].childNodes [\u0026lt;DOM Text node \u0026#34;\u0026#39;\\n \u0026#39;\u0026#34;\u0026gt;, \u0026lt;DOM Element: title at 0x7f4550c59508\u0026gt;, \u0026lt;DOM Text node \u0026#34;\u0026#39;\\n \u0026#39;\u0026#34;\u0026gt;, \u0026lt;DOM Element: reference at 0x7f4550c595a0\u0026gt;, \u0026lt;DOM Text node \u0026#34;\u0026#39;\\n \u0026#39;\u0026#34;\u0026gt;, \u0026lt;DOM Element: price at 0x7f4550c59638\u0026gt;, \u0026lt;DOM Text node \u0026#34;\u0026#39;\\n \u0026#39;\u0026#34;\u0026gt;, \u0026lt;DOM Element: dimensions at 0x7f4550c596d0\u0026gt;, \u0026lt;DOM Text node \u0026#34;\u0026#39;\\n \u0026#39;\u0026#34;\u0026gt;] For example, let us display the tag name of the root’s child which has id == p1:\n1 2 3 4 5 6 \u0026gt;\u0026gt;\u0026gt; for child in root.childNodes: ... if child.childNodes: ... if child.hasAttribute(\u0026#39;id\u0026#39;) and child.getAttribute(\u0026#39;id\u0026#39;) == \u0026#39;p1\u0026#39;: ... print(child.tagName) ... product One important thing to be aware of is that minidom is very memory consuming and I think this is due to the fact it is heavilty based on recursive functions. It can be handy only when processing small files of XML data. An other thing to know is minidom does not support XPATH expressions. To remedy to the two forementioned drawbacks, it is recommended to use the lxml library.\nThe library is quite well documented2. In case you do not have Internet access to check the documentation, you can always the most important minidom available functions by calling the XML Document object you created this way:\n1 dir(xml_doc) And you can inspect an individual function (chosen from the list the forementioned line outputs) this way:\n1 help(xml_doc.getElementsByTagName) 1.https://wiki.python.org/moin/MiniDom 2.https://docs.python.org/3.0/library/xml.dom.html\n","date":"Apr 23","permalink":"https://example.com/post/minidom/","tags":null,"title":"XML parsing with minidom"},{"categories":["development"],"contents":"This article describes the main strategies to implement the Singleton design pattern in Python. I am going to skip the whole very subjective \u0026ldquo;use and do not use singleton\u0026rdquo; conundrum.\nIntroduction Definition Implementation Module Traditional Decoractor Metaclass Borg Conclusion Introduction There are developers who simply call to \u0026ldquo;ban\u0026rdquo; this design pattern. Personally, I think while it does not respect the single responsibility principle, the singleton may still be useful in situations where you need to control a concurrent access to a shared resource, or want to use it to implement other design patterns. Definition On page 144 of the Gof4 book, the singleton design pattern\u0026rsquo;s stated intent is to \u0026ldquo;ensure a class only has one instance\u0026rdquo;. Implementation The singleton design pattern must be implemented in such a way that the sole class instance must be reachable via a global access point -namely a function, and can be extensible by the means of inheritence. Below are listed some methodologies Python uses to concrete it. Module The easiest approach to fulfill the singteton design pattern goal is to keep the global state in private variables within module which, in turn, must provide a way to access them by means of public functions.\nAs an example, here is singleton.py file:\n1 2 3 4 _firstname = \u0026#39;Begueradj\u0026#39; #private state def get_firstname(): #access point return _firstname The main application makes use of it as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import singleton class UseSingletonModule: def __init__(self): self.firstname = singleton.get_firstname() self.lastname = \u0026#39;Amazigh\u0026#39; def print_fullname(self): print(\u0026#39;Full name: {} {}\u0026#39;.format(self.firstname, self.lastname)) if __name__ == \u0026#39;__main__\u0026#39;: singleton_instance = UseSingletonModule() singleton_instance.print_fullname() This is a practical approach but the main trivial issue with it is that there is no way to re-use the code through inheritance. This means the module approach does not fully respect the singleton design pattern. One can also argue this may sound a \u0026ldquo;coward\u0026rdquo; implementation in that may be most of other high level programming languages could do the same. This can also anger purists in that it is neither pythonic nor does it take advantage of the object-oriented concepts. Traditional To remedy to the drawbacks of the previous approach, there is a traditional way to implement the singleton design pattern in Python:\n1 2 3 4 5 6 7 8 9 class TraditionalSingleton(object): def __new__(cls): if not hasattr(cls, \u0026#39;instance\u0026#39;): cls.instance = super(Singleton, cls).__new__(cls) return cls.instance def __init__(self): self.data_test = \u0026#39;begueradj\u0026#39; Here an advantage is taken from the special static method __new__() which helps to control instance creation. Unlike __init__(), it always takes as a parameter the class cls in which it is invoked and returns an instance of it.\nThe Python built-in function hasattr() checks if the class cls has an attribute called \u0026lsquo;instance\u0026rsquo;. If that is not the case, the \u0026lsquo;instance\u0026rsquo; attribute is created and returned.\nA better explanation of this implementation can be through the use of TraditionalSingleton() class:\n1 2 \u0026gt;\u0026gt;\u0026gt; first_instance= TraditionalSingleton() \u0026gt;\u0026gt;\u0026gt; second_instance = TraditionalSingleton() Two instances of TraditionalSingleton() class are created. In reality, they are the same instance:\n1 \u0026gt;\u0026gt;\u0026gt; first_instance is second_instance True Hence modifying data_test variable in any instance will be automatically mirrored in the other instance:\n1 2 3 \u0026gt;\u0026gt;\u0026gt; first_instance.data_test = \u0026#39;begueradj.com\u0026#39; \u0026gt;\u0026gt;\u0026gt; second_instance.data_test \u0026#39;begueradj.com\u0026#39; The main issue of this approach remains its inconvenience to use inheritance. Decoractor There are many ways to implement the singleton using a decorator. Here is one of the implementations I found on StackOverflow:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Singleton: def __init__(self, cls): self._cls = cls def get_instance(self): try: return self._instance except AttributeError: self._instance = self._cls() return self._instance def __call__(self): raise TypeError(\u0026#39;Use Singleton.get_instance().\u0026#39;) def __instancecheck__(self, inst): return isinstance(inst, self._cls) Here is how to force a class to be a singleton:\n1 2 3 @Singleton class SingletonClass: # do whatever needed This is how to instantiate SingletonClass() class:\n1 singleton_class_instance = SingletonClass.get_instance() The main drawback with this implementation is that it is not thread-safe. Metaclass An object is an instance of a class which is itself an instance of a metaclass:\n1 2 3 4 5 6 class Singleton(type): _instances = {} def __call__(cls): if cls not in cls._instances: cls._instances[cls] = super(Singleton, cls).__call__() return cls._instances[cls] A class can be declared singleton like follows:\n1 2 class SingletonClass(metaclass=Singleton): # do whatever needed While this approach copes well with inheritance, I still personally prefer the decorator approach which is handy. Borg The Borg approach states that the identity of the instantiated objects is not important. Borg focus on the state which must be common and shared. This allows the creation of as many instances as needed, but any of these instances which modifies the state mirrors the modification to all the remaining instances. This is why Borg is also referred as monostate design pattern:\n1 2 3 4 5 class Borg: _shared_state = {} def __init__(self): self.__dict__ = self._shared_state Any class which inherits from the above one becomes a Borg class itself:\n1 2 3 4 5 class SingletonExample(Borg): def __init__(self, name=None): Borg.__init__(self) # Do whatever needed Alex Martelli, the author of Borg, considers this as a design pattern of its own. While some others consider it just a special singleton implementation. I personally belong to this later group. Conclusion I have gone briefly gone through the main approaches Python uses to implement it. You can also design your own implementation. It is up to you the developer to decide which one is more suitable to your case.\n","date":"Apr 08","permalink":"https://example.com/post/python-singleton-design-pattern/","tags":null,"title":"Python singleton design pattern"},{"categories":["development"],"contents":"Python is a paramount programming languages. The same is to be said about user graphical interfaces. SaYa is an idiom I devised for tkinter developers to help them build less error-prone applications.\nBackground Explanation Motivation Statement Advantages Background This morning I landed on this question asked on StackOverflow where the OP stumbled on this error he shared through his/her comment to my answer:\n1 NoneType\u0026#39; object has no attribute \u0026#39;destroy\u0026#39; The origin of the problem is that the OP created a button widget within the class initializer and positioned in the same time:\n1 self.widget_object = ttk.WidgetType(arguments).pack() When a mouse click event is performed, the callback is executed:\n1 self.widget_object.destroy() Explanation The Python interpreter raises a TypeError exception late at runtime because it was assigned to destroy the None singleton object.\nIn Python, everything is an object (yes, including classes), to achieve this principle, Python forces functions without a return type to return the None object. This is the case of the 3 methods used to place widgets in tkinter: place(), pack() and grid().\nThis means the value of self.widget_object in the initializer is None. No wonder the interpreter can not apply destroy() method on it. Motivation Similar situations are frequent when developing GUIs in tkinter among newbies as well as experienced developers. That is why I created the SaYa idiom which I name using my parents\u0026rsquo;s first names first syllables to thank them for giving me the opportunity to live and a chance they were not able to afford for themselves: to study. Statement SaYa idiom states: When building a GUI in tkinter, always place widgets after their creation. Advantages An idiom has at least one reason to exist. Here are the benefits of SaYa on tkinter GUIs:\nScalability Ease of maintenance Narrowing down the attack surface on applications as this reduces bugs SaYa is an idiom that proves to be benefical for all Python-tkinter developers.\n","date":"Mar 19","permalink":"https://example.com/post/saya-idiom/","tags":null,"title":"tkinter: the SaYa idiom"},{"categories":["development"],"contents":" Introduction I first thought to write about TDD (Test-Driven Development), but given the list of reminders I have to emphasize and which would lead to a very lengthy article, I decided to shrink the work into smaller edible articles.\nYou can find a lots of documentation about unit testing with Python on the Internet, so why am I adding this brick? That is not your business. But landing on this page will be useful for you as I found highly ranked -by Google- online resources discussing Python unit testing where the authors either mislead you at best or misinform you, not because they do not know but because they do not give importance to details.Yes, as a programmer, your job is to be obsessed by details.\nHistory What is unit testing? What to test? What are unit tests useful for? How to write a unit test? Which tools to use? Anti patterns Conclusion History In the old days, when computers were slow, very simple and short programs were taking dozens of minutes to build. In those days, the days of ENIAC and EDVAC, programmers were used to take long hours trying to figure out what went wrong. It was the era of debugging. Yes, debugging is the father of all advanced testing techniques you know today. During the 1970’s, testing became a distinct idea from debugging when computers became faster thanks to IBM who released, by the start of 1970’s, the first computer to use a semiconductor memory allowing programmers to develop some primitive but yet interesting video games such as Atari 2600 by the end of that decade.\nNowadays, unit testing is already an old concept which gave birth to several grand children such as TDD, BDD and ATDD; but do not be surprised to hear some of your development colleagues think of it as a new one.\nOn the coming Summer holidays, you may read The Growth of Software Testing by D. Gelperin, B. Hetzel who covered the history of testing at best. What is unit testing? Unit testing is all about moving through the small code units of your application to see if, given certain circumstances and conditions, they respond as expected to fulfill the desired functionality. In plainer English, unit testing is about hunting for eventual errors that may lay in your program functions. If unit tests do not show errors in your code, it does not mean there are no errors or that your program is correct: they just are, when well written, a paramount milestone that help you to product a good quality software by reducing the number of errors. This means unit tests are not a means by themselves but are a way that helps to walk safely to the end. What to test? Obviously, you have to test your smallest code units. The smallest code units you have are not classes but the functions they wrap. If your code is not organized in terms of classes or functions then you should shift your career from a developer to a dish washer in the nearest restaurant to your living place.\nAfter you refactor a given function without changing its functionality and you found out that the corresponding unit test no longer passes then you can fairly conclude that your unit test is wrong because unit tests are there to confirm or infirm functionality not implementation details. How to write a unit test? There are many details to talk about, but I am not going to highlight the basic principles you must not forget when you plan to code a unit test in Python: Your test class must inherit from unittest.TestCase. Your test class should be prefixed with Test. Run the test module by calling unittest.main(). The test modules must trail with _test. The test functions should be prefixed by test_. Last but not the least, all unit tests must be independent from each others. Keep this in mind and let us work on an example: the present tutorial is the first step to write a primitive calculator with a graphical user interface to perform addition, subtraction, multiplication and division of integer and float numbers.\nFirst, create a virtual environment with the following hierarchy:\n1 2 3 4 5 6 7 8 . ├── calculator.py ├── __init__.py └── tests ├── __init__.py └── unit ├── calculator_test.py └── __init__.py The convention when programming in Python is to gather your tests within a package called tests. As a sub-package, I created unit: this is a good practice as with real projects you will have to run other tests that unit tests.\nAs a starting point, let us focus on the division operation only:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/usr/bin/env python # -*- coding: utf-8 -*- import logging class CalculatorCore: \u0026#34;\u0026#34;\u0026#34;Basic calculation functions: +, -, * and / For the moment, I deal only with \u0026#34;/\u0026#34; operation. \u0026#34;\u0026#34;\u0026#34; def __init__(self): pass def check_operands_validity(self, *args): for arg in args: if not (isinstance(arg, float) or isinstance(arg, int)): return False return True def divide_two_integer_or_float_numbers(self, dividend, divisor): if self.check_operands_validity(dividend, divisor): try: a = dividend / divisor except Exception as exception: logging.error(exception) raise else: return a return dividend / divisor return 0 if __name__ == \u0026#39;__main__\u0026#39;: calculator_core = CalculatorCore() print(calculator_core.divide_two_integer_or_float_numbers(2,4)) Save the above code in calculator.py module.\nFew comments about the above code:\nI chose to name the above class by CalculatorCore instead of Calculator because I will code the CalculatorGUI class on the next tutorial. Checking the parameters validity is done in a separate function called __check_operands_validity() to avoid code duplication in further operation. To test if everything is Ok with our class, you have to test its different code units. Let us start by testing the functionality of the main useful function which properly performs the division using Python’s built in unittest module:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import unittest from calculator import CalculatorCore class TestCalculatorCore(unittest.TestCase): def setUp(self): self.calc = CalculatorCore() def test_divide_two_integer_or_float_numbers_returns_correct_result(self): self.assertEqual(3, self.calc.divide_two_integer_or_float_numbers(9,3)) if __name__ == \u0026#39;__main__\u0026#39;: unittest.main() You observe that after I imported the necessary things, I respected the previous rules. The only new element up to this point is the setUp() method which is there to instantiate once only the class CalculatorCore. Save the above code within calculator_test.py.\nIn this test, I want to check if my function performs the division correctly, so I used assertEqual() for this purpose.\nThe simplest way to run this test is to position yourself on the level of calculator.py package and execute this command:\n1 python -m tests/unit/calculator_test Note how I wrote calculator_test without the .py extension.\nThe output should be this:\n1 2 3 4 5 . ---------------------------------------------------------------------- Ran 1 test in 0.000s OK Our output says there was only one test function implemented \u0026ldquo;Run 1\u0026rdquo; and the test has passed \u0026ldquo;OK\u0026rdquo;. The \u0026ldquo;.\u0026rdquo; reflects the number of tests which passed.\nAs a code tester, you must also check if your unit test fails when given a wrong input:\n1 2 def test_divide_two_integer_or_float_numbers_returns_error_when_divisor_is_null(self): self.assertEqual(3, self.calculator_core.divide_two_integer_or_float_numbers(9,0)) Run again:\n1 python -m tests.unit.calculator_test You will get this informative output which speaks by itself:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 .ERROR:root:integer division or modulo by zero E ====================================================================== ERROR: test_divide_two_integer_or_float_numbers_returns_error_when_divisor_is_null (__main__.TestCalculatorCore) ---------------------------------------------------------------------- Traceback (most recent call last): File \u0026#34;/home/begueradj/projects/calculator/tests/unit/calculator_test.py\u0026#34;, line 14, in test_divide_two_integer_or_float_numbers_returns_error_when_divisor_is_null self.assertEqual(3, self.calculator_core.divide_two_integer_or_float_numbers(9,0)) File \u0026#34;calculator.py\u0026#34;, line 21, in divide_two_integer_or_float_numbers a = dividend / divisor ZeroDivisionError: integer division or modulo by zero ---------------------------------------------------------------------- Ran 2 tests in 0.001s FAILED (errors=1) But you can do a better test: you can create a test function to check if the ZeroDivisionError is raised. This way you can get rid of the previous function test:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import unittest from calculator import CalculatorCore class TestCalculatorCore(unittest.TestCase): def setUp(self): self.calculator_core = CalculatorCore() def test_divide_two_integer_or_float_numbers_returns_correct_result(self): self.assertEqual(3, self.calculator_core.divide_two_integer_or_float_numbers(9,3)) def test_divide_two_integer_or_float_numbers_raises_exception_when_divisor_is_zero(self): self.assertRaises(ZeroDivisionError, self.calculator_core.divide_two_integer_or_float_numbers, 2, 0) if __name__ == \u0026#39;__main__\u0026#39;: unittest.main() Both test pass now and you can see the exception confirmation:\n1 2 3 4 5 6 ERROR:root:integer division or modulo by zero .. ---------------------------------------------------------------------- Ran 2 tests in 0.001s OK The question you may ask at this stage is whether or not there is nothing else to test. Luckily there is a good (but not enough) criteria to answer to this question: it is the notion of code coverage. For this purpose, there is a tool called coverage.py which you can install as follows:\n1 pip install coverage You will get a Terminal output similar to this one:\nCollecting coverage Downloading coverage-4.3.4-cp35-cp35m-manylinux1_x86_64.whl (191kB) 100% |████████████████████████████████| 194kB 1.7MB/s Installing collected packages: coverage Successfully installed coverage-4.3.4 Let us see the code coverage of our program:\n1 coverage report -m It says that only 73% of our code is tested:\n1 2 3 Name Stmts Miss Cover Missing --------------------------------------------- calculator.py 22 6 73% 15, 22-24, 27-28 As a thumb of rule, code coverage must not be lower than 80%. So a closer look to our program shows we did not test check_operands_validity() function. Let us do it:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import unittest from calculator import CalculatorCore class TestCalculatorCore(unittest.TestCase): def setUp(self): self.calculator_core = CalculatorCore() def test_divide_two_integer_or_float_numbers_returns_correct_result(self): self.assertEqual(3, self.calculator_core.divide_two_integer_or_float_numbers(9,3)) def test_divide_two_integer_or_float_numbers_raises_exception_when_divisor_is_zero(self): self.assertRaises(ZeroDivisionError, self.calculator_core.divide_two_integer_or_float_numbers, 2, 0) def test_check_operands_validity_returns_false_if_parameters_is_character(self): self.assertFalse(self.calculator_core.check_operands_validity(\u0026#39;b\u0026#39;)) if __name__ == \u0026#39;__main__\u0026#39;: unittest.main() What are unit tests useful for? Errors in software can cost money, reputation damage, compromised systems by nefarious users who succeed to exploit your application’s flaws, or simply lead to people death. Unit tests are not a magic wand to eliminate once for all those errors, but it helps to significantly reduce them.\nIf you are drawn to code many unit tests for a given function so that to cover all its possible scenarios then this means your function is not good and you have to shrink it down to smaller code units (functions) with fine grained responsibilities. A function is there to do one thing only: remember of this principle and it will save your life. Which tools to use? Testing is such important that it spawned a long list of testing tools in different programming languages: TestOOB , tox, TestGears are some of the good ones. Howeve, my favorite tool is Nose. Which one you should use is a matter of personal taste. Anti patterns One of the highly ranked tutorials on this subject ranked by Google teaches you bad practices: for example, the author named test_primes.py. If you test your code using a tool like Nose then nothing will work because Nose identifies the test files by looking for files which suffix is _test. If the author respected the PEP 8 standard, he would not be disappointed when using Nose.\nThe same author injects several input values for one unique test. This is a bad practice because as soon as one assertion fails, the rest are skipped. The author should use subTest() function instead.\nConclusion Unit tests are a fundamental concept to grasp in that they help to reduce the attack surface and bugs of your applications. I did not cover the doctest subject here because I simply do not like it, do not use it professionally and more importantly it does not add a value to what I already do using unittest, nose and mock frameworks (yeah, we will see mock in the coming tutorial and in the right moment).\nThe best you can read about unit testing is the famous The Art of Unit Testing by Roy Osherove. The examples provided in this book, however, are in C#. As an exercise, you can complete the program of today with the remaining mathematical operations and design their corresponding unit tests before we continue this tutorial.\n","date":"Mar 13","permalink":"https://example.com/post/python-unit-testing/","tags":null,"title":"Python unit testing"},{"categories":["development"],"contents":"You will learn how to install OpenCV 3.2.0 on Ubuntu 16.04.2 LTS to work with Python 3.5.2.\nIntroduction I just freshly finished the installation of Ubuntu 16.04.2 LTS on my new laptop, so I had to install the programming environments I need. As I am passionate of image processing and computer vision, I needed to re-install the latest version of OpenCV (3.2.0) to be able to use it with Python 3.5.2\nThe best way to work with Python libraries on a Linux platform is by relying on Python virtual environments which saves headaches caused by versions dependencies. This is why I suppose you have already installed virtualenv.\nNota bene Do not even give a try to install the wrapper package for OpenCV python bindings:\n1 pip install opencv-python The reason is that this easy way of doing things will lead you to install a package which is not enough mature as you can not even deal with videos and can not even display an image using cv2.imshow() function. So do not be lazy and follow the below steps.\nInstallation steps I am sharing with you what worked for me on my machine (64 bits):\nDownload OpenCV 3.2.0: 1 2 wget -O 3.2.0.zip https://github.com/Itseez/opencv/archive/3.2.0.zip unzip 3.2.0.zip Download SIFT and SURF OpenCV 3.2.0 implementations: 1 2 wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.2.0.zip unzip opencv_contrib.zip Install the all the packages needed to compile a debian package: 1 2 3 4 sudo apt-get update sudo apt-get upgrade sudo apt-get dist-upgrade sudo apt-get install build-essential cmake pkg-config Install the libraries needed to process different video and images formats: 1 2 3 sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev sudo apt-get install libxvidcore-dev libx264-dev libgtk-3-dev sudo apt-get install libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev Install computation libraries: 1 sudo apt-get install libatlas-base-dev numpy gfortran Install Python 3.5 development libraries: 1 sudo apt-get install python3.5-dev Create a virtual environment where to install OpenCV 3.2.0: 1 2 3 virtualenv cv cd cv source bin/activate Setting OpenCV 3.2.0 (this takes time, be patient): 1 2 3 4 5 6 7 8 9 10 cd ~/3.2.0/ mkdir build cd build cmake -D CMAKE_BUILD_TYPE=RELEASE \\ -D CMAKE_INSTALL_PREFIX=/usr/local \\ -D INSTALL_PYTHON_EXAMPLES=ON \\ -D INSTALL_C_EXAMPLES=OFF \\ -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.1.0/modules \\ -D PYTHON_EXECUTABLE=~/.virtualenvs/cv/bin/python \\ -D BUILD_EXAMPLES=ON .. Compiling and installing OpenCV 3.2.0: 1 2 3 make -j4 sudo make install sudo ldconfig Rename cv2.cpython-35m-x86_64-linux-gnu.so to cv2.so 1 sudo mv /usr/local/lib/python3.5/site-packages/cv2.cpython-35m-x86_64-linux-gnu.so /usr/local/lib/python3.5/site-packages/cv2.so Simlinking OpenCV3.2.0 to the cv virtual environment: 1 2 cd ~/.virtualenvs/cv/lib/python3.5/site-packages/ ln -s /usr/local/lib/python3.5/site-packages/cv2.so cv2.so These previous steps lead me to what I wanted to get:\n1 2 3 4 5 6 7 8 (cv) begueradj@h4ck-B1ll:~$ python Python 3.5.2 (default, Nov 17 2016, 17:05:23) [GCC 5.4.0 20160609] on linux Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; import cv2 \u0026gt;\u0026gt;\u0026gt; cv2.__version__ \u0026#39;3.2.0\u0026#39; \u0026gt;\u0026gt;\u0026gt; ","date":"Jan 29","permalink":"https://example.com/post/opencv-ubuntu16/","tags":null,"title":"Installing OpenCV 3.2.0 for Python 3.5.2 on Ubuntu 16.04.2 LTS"},{"categories":["security"],"contents":"What are the JavaScript malware attack techniques and how to prevent from them?\nNote: I first published this as an answer on InfoSec website under a previous and now deleted profile.\nServer side polymorphism Literally meaning many shapes, polymorphism is a technique used by malware authors to evade signatures based detectors. Polymorphism is qualified as being server sided when the engine which produces several but different copies of the malware is hosted on a compromised web server (Server-Side Polymorphism: Crime-Ware as a Service Model (CaaS)). simulated metamorphic encryption generator (SMEG) version 1.0 was the first engine developed to implement the notion of polymorphism for computer viruses on the early 1990\u0026rsquo;s (Parallel analysis of polymorphic viral code using automated deduction system)\nCode obfuscation The other common feature you may find in malicious JavaScript code is that obfuscation is always used. This common factor -obfuscation- does not make even things simpler: because innocuous JavaScript code also uses obfuscation (for instance, some developers for example do not want their personal pretty JavaScript function to be understood by others as you can easily read HTML and JS pages codes). Along with server side polymorphism, code obfuscation is a widely used technique by malware authors to circumvent antivirus scanners. A myriad of techniques could be used to obfuscate JavaScript codes such as string reversing, Unicode and base 64 encoding, string splitting and document object model (DOM) interaction (Malware with your Mocha? Obfuscation and anti­-emulation tricks in malicious JavaScript.).\nCode unfolding Code unfolding is the mechanism with which a new code is introduced at run time. In JavaScript, this is made concrete by invoking functions like document.write() and eval() in order to execute obfuscated portions of code and functions. (Weaknesses in Defenses Against Web-Borne Malware)\nHeap spray This attack targets mainly web browsers. The user controllable data can corrupt the heap by a remote execution code if the miscreant has compromised the user\u0026rsquo;s computer to the point he can have access to this vulnerable memory area (BuBBle: A Javascript Engine Level Countermeasure against Heap-Spraying Attacks)\nDrive-by download Drive-by download attacks consist in downloading and and executing or installing malicious programs without the user\u0026rsquo;s consent. Such attacks occur by exploiting browsers\u0026rsquo; vulnerabilities, their add-ons or plugins such as ActiveX controls or unpatched useful software such as Acrobat Reader and Adobe Flash Player (Drive-by download attacjs: effect and detection methods, MSc Information Security)\nMulti execution paths It is possible to trigger an action only if certain conditions are fulfilled. Such circumstances could be the arrival of a given date or the existence of a file on the system on which the malware is intended to be executed. An other quick and well known example could be a denial of service attack that must be fired only if the number of the botnet\u0026rsquo;s nodes has reached a certain value. That is the notion of multi execution paths (Exploring Multiple Execution Paths for Malware Analysis)\nImplicit conditionals This technique is mainly used against dynamic approach detectors. The main idea for this process is to execute a set of instructions by hiding the condition that fires it (Weaknesses in Defenses Against Web-Borne. Malware)\nGiven these common features and tactics used by JaaScript malware, if you want to detect this type of malware as you asked, you need first to study the state of the art of the methods used to detect that. Various methods have been developed so as to detect web (JavaScript) malware. We can divide them into two main categories as follows:\nMachine learning based classifiers Features: HTML and JavaScript codes distinguishing features extraction. These features are then evaluated to train a machine learning for classifier generation. The premise of this approach is that malicious webpages are likely to be different from benign ones (Thesis: Effective Analysis, Characterization, and Detection of Malicious Web Pages) Advantages: Lightweight approach, useful to deal with a bulk of websites analysis. Drawbacks: Obsolete against obfuscated JavaScript code and totally useless against new malicious code patters or zero attacks. Dynamic methods Features: Based on the dynamic behavior analysis, these techniques are implemented using either proxies where a page is rendered to the visitor only after its safety is checked, or a sandboxing environment relying on honeyclients (Same thesis: Effective Analysis, Characterization, and Detection of Malicious Web Pages). Advantages: Efficient against zero day attacks and obfuscated code. Drawbacks: Resources and time consuming. Sandboxing environments rely on low interaction honeyclients which themselves are based on virus signatures, and thus suffer from the same disadvantages as the static methods\u0026rsquo; ones. What you have tried to do belongs to the first category.\nNow, after you are well informed about all this, it can be useful for you to study some available tools dedicated for this purpose in order to implement your own technique. So let me mention you three important tools among so many others:\nZozzle Zoozle relies on Bayesian classification abstract syntax tree (AST) . It is legitimately classified as mostly static web malware detector because it embeds another engine that supervises the JavaScript code execution at run time. Its authors claim that it has a very low false positive rate of 0.0003% and is able to process over one megabyte of HTML and JavaScript code per second. This tool is intended to be used as a browser plugin; its aim is to protect browsers against heap spray attack. It is time to point out how ZOZZLE operates.\nHow ZOZZLE operates? The following figure summarizes its core (ZOZZLE: Fast and Precise In-Browser JavaScript Malware Detection):\nExtraction and labeling phase: The classifier needs training data. This data is extracted from obfuscated JavaScript code. Instead of developing an efficient de-obfuscation technique, Compile function interception calls is performed. Compile function is located in jscript.dll library. It is a smart way to obtain plain JavaScript code because it is called each time \u0026lt;SCRIPT\u0026gt; and \u0026lt;IFRAME\u0026gt; tags, or eval() and document.write() functions have been called, which thing defines also the code context. Each code context is saved on the hard drive for further analysis.\nFeature selection: JavaScript AST is used to tag each labeled context code for its safety or malignancy. The features are pre-selected using this formula: Where:\nA: malicious context with feature\nB: benign context with feature\nC: malicious context without feature\nD: benign context without feature\nClassification: The Bayesian classifier is used for classification because even if it seems obsolete, in practice it gives good results and it is not time consuming.\nProfiler Profiler follows the static schema to detect web malware. It combines static features analysis of HTML and JavaScript code, including unified resource locator (URL)s. Then it uses machine learning techniques to teach a classifier that decides if a webpage embeds malicious content or not. Suspicious webpages are not processed by this tool. It rather forwards them to third party technologies such as Wepawet (Prophiler: A Fast Filter for the Large-Scale Detection of Malicious Web Pages)\nSpyProxy\nSpyProxy follows the dynamic analysis principles. It monitors the active content of webpages within a virtual machine before deciding to render them to the visitor or not. The architecture of SpyProxy is illustrated through this figure (SpyProxy: Execution-based Detection of Malicious Web Content):\n(a): The proxy performs a static analysis over the requested page. In the case it judges is likely to be malicious, if forwards it to the virtual machine. basically only pages with active content are forwarded to the virtual machine (VM). (b): The virtual machine loads the malicious pages to monitor their activities. (c): Only benign pages are rendered back to the proxy which forwards them in turn to the user\u0026rsquo;s browser. Iceshield ICESHIELD performs in-line dynamic code analysis using a set of heuristics to verify attack attempts. Its authors take an inventory of the attacks that usually target the DOM properties of a website that are performed by injecting JavaScript into the website\u0026rsquo;s source code. ICESHIELD supervises the running JavaScript code by predefining a set of rules related to functions calls and applying heuristics on them in the hope to determinate whether the script is malicious or not (IceShield: Detection and Mitigation of Malicious Websites with a Frozen DOM).\n","date":"Jan 24","permalink":"https://example.com/post/javascript-malware/","tags":null,"title":"JavaScript malware"},{"categories":["security"],"contents":"You have heard of SHA-1 deprecation since 2012. Mozilla finally confirms this is not a joke.\nMay be you are tired of hearing over and over again about SHA-1 deprecation since 2012 when Bruce Schneier announced that collision attacks may be cost around $700k to perform by 2015, which was the year where the first practical full-on collision attack was lead out by researchers who predicted a costless real world attack may occur on 2018.\nSince that, Google, Microsoft and browsers manufacturers have raced the migration from SHA-1 to SHA-2. On last Tuesday, Mozilla gave the pace for this rush by being the first to display the warning Untrusted Connection on its Firefox browser to users visiting a website which SSL/TLS certificate is signed by SHA-1 instead of SHA-256.\nNow you may think this paranoia makes no sens as no real world attacks exploiting this technique are known by today. My answer is that lack of paranoia is a synonym of unconsciousness: publicly, there are no known attacks, that is true, but under the hoods who knows? Also, history teaches us how MD5 which is more prone to collision attacks was equivalently used in cyber espionnage attacks against Iran through the famous Flame malware.\nThe SSL/TLS certificate installed for my website uses SHA-2 as this Python script says:\n1 2 3 import os os.system(\u0026#39;openssl s_client -connect www.begueradj.com:443 \u0026lt; /dev/null 2\u0026gt;/dev/null\\ | openssl x509 -text -in /dev/stdin | grep \u0026#34;Signature Algorithm\u0026#34;\u0026#39;) Output:\n1 2 Signature Algorithm: sha256WithRSAEncryption Signature Algorithm: sha256WithRSAEncryption I just wonder how much this migration would cost as, in real life, SHA-1 underpins around 35% of the digital certificates existing today resulting without mentioning the nightmares engineers are enduring regarding their unsupported applications or hardware reconfigurations to perform.\n","date":"Jan 17","permalink":"https://example.com/post/mozilla-sha1/","tags":null,"title":"Mozilla beheads SHA-1"},{"categories":null,"contents":"I am Billal BEGUERADJ.\nI\u0026rsquo;m into Software Development \u0026amp; Information Security.\nYou can contact me via my GPG fingerprint: 7542 E34E 17ED 6FF5 8C08 B315 6C67 7E1A FC80 10DD\n","date":"Jan 01","permalink":"https://example.com/about/","tags":null,"title":"About"},{"categories":null,"contents":"","date":"Jan 01","permalink":"https://example.com/articles/","tags":null,"title":"Articles"}]